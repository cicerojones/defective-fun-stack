* Project 2 ("Tournament Results") EXCEEDS SPECIFICATIONS code overview
  :PROPERTIES:
  :ID:       44BCAC8C-C972-42B3-9166-E0BA720CABFE
  :END:
This README primarily provides a description of three files:

- core/final_project.py
- core/tournament.sql
- core/tournament_demonstration.py

There are three steps needed to run and test the code

1. load the database schema (~tournament.sql~) into a running postgres database
2. load the ~final_project.py~ script (e.g. from the command line with
   ~python final_project.py~
3. finally, run the demonstration script, ~tournament_demostration.py~, similarly from the
   command line

** Meeting and Exceeding Specifications
In the [[file:../meets-spec/README.org][readme]] for "meets specs," I have described a basic outline of
what the code there does in order to "meet specifications," and this
description applies here as well. However, new functions were written
that extend and supersede that basic functionality (of course, code
that was not present in the "meets specs" code base was needed to
provide the "exceeds spec" features). A brief explanation of those
extensions, as well as further documentation of the code used to enact
them, are found in the [[id:D724F6B4-6303-41BF-A591-57DD97CFD8ED][Code]] section below.

Additionally, I provide some basic documentation description of the
postgresql database schema, which features extensive use of
psql-specific functionality, including psql functions, views, triggers
etc.

** Description of extra credit features
What follows is a description of three features that the "exceeds
specs" code base provides.
*** /allow ties/
 Support games where a draw (tied game) is possible. This will require
 changing the arguments to reportMatch.
*** /use Opponent Match Wins as criteria for breaking ties in ranking/
When two players have the same number of wins, rank them according to
OMW (Opponent Match Wins), the total number of wins by players they
have played against.
*** /Support more than one tournament in the database/
Support more than one tournament in the database, so matches do not
have to be deleted between tournaments. This will require
distinguishing between “a registered player” and “a player who has
entered in tournament #123”, so it will require changes to the
database schema.
** Code
   :PROPERTIES:
   :ID:       D724F6B4-6303-41BF-A591-57DD97CFD8ED
   :END:
Below, I provide an organization of the code stubs for the functions
in the exceeds version of 'final_project.py'

While this adds somewhat to the documentation provided by the
commenting in [[file:core/final_project.py][final_project.py]] it all could admittedly be made more
clear. I simply have dragged my feet too long to not submit it now in
a somewhat rough state, as the code in tournament_demonstration.py
runs.
*** functions shared with 'meets' code (in concept, if not in exact implementation)
**** delete tables
#+BEGIN_SRC python
def new_deleteTable(dbname, table_name):
#+END_SRC

**** count Players
#+BEGIN_SRC python
def new_countPlayers(dbname, table_name):
#+END_SRC

**** register Players
#+BEGIN_SRC python
def new_registerPlayer(dbname, table_name, player_name, tournament_name):
#+END_SRC

**** player Standings
#+BEGIN_SRC python
def new_playerStandings(dbname, table_name):
#+END_SRC

**** register Matches
#+BEGIN_SRC python
def registerMatch(dbname, table_name, tournament_name, round_of_tournament):
#+END_SRC

*** new helper function
#+BEGIN_SRC python
def keyword_statement_string(table_name, sql_keyword):
#+END_SRC
*** entirely new functions for 'exceeds specs'
**** register Match Participants
#+BEGIN_SRC python
def registerMatchParticipants(dbname, table_name, sport, round_no, player_id1, player_id2):
#+END_SRC

**** register scores
#+BEGIN_SRC python
def registerScores(dbname, table_name, match_no, home_score, away_score):
#+END_SRC

**** log the results for a given round of a given tournament
#+BEGIN_SRC python
def log_round_results(dbname, tournament_name, round_of_tournament):
#+END_SRC

**** count the number of players in a database?
#+BEGIN_SRC python
def how_many_players(dbname):
#+END_SRC

**** set the Opponents Match Win for a player in the database
#+BEGIN_SRC python
def set_OMW(dbname, player_id):
#+END_SRC

**** set the OMW for all the players in the database
#+BEGIN_SRC python
def set_all_OMW(dbname):
#+END_SRC

**** create the player stnadings for a given tournament_name
#+BEGIN_SRC python
def new_playerStandings_alt(dbname, table_name, tournament_name):
#+END_SRC

**** set up function for creaeting swiss pairings
#+BEGIN_SRC python
def naive_pairings(tournament_name):
#+END_SRC

**** master function for creating swiss Pairings for a given round of a given tournament
#+BEGIN_SRC python
def naive_swissPairings(round_no, tournament_name):
#+END_SRC

** SQL schema
A heavily commented version of the SQL schema can be found here: [[file:additional-documentation/verbose_tournament.sql]]
** 'Tournament Demonstration' file
*** What is Tournament_demonstration?
Lastly, [[file:core/tournament_demonstration.py][tournament_demonstration.py]] is used show a demonstration of
the final_project.py code.

It shows:

- one, eight-person "tennis" tournament being run using 'swiss pairings'
- one, eight-person "soccer" tournament being run using the same
  database,
  - additionally, ties are allowed, and a final winner is determined
    by use of Opponent Match Wins as a tie-breaker.
- one, sixteen-person "mahjong" tournament failing--the code is
  designed to handle only eight-person tournaments


*** Why no real test, my friend?
In the case of the 'exceeds specs,' there just was too much to write
explicit and thorough tests for; I began the process and was so
stymied that I dragged my feet for months. Ultimately, I provide a
basic "code journey" through one particular run of the "exceeds
specifications" version, showing that the extended code can handle
ties, multiple tournaments, and OMW ranking.
** Refactoring Considerations
The main problem is that the all important SQL function that sets
player OMW is hard-coded to work for tournaments up to eight
players! This is a major shortcoming :(

Additionally, there are a few places where hard-coding has meant that
certain assumptions are being made about the kinds of tournaments
being used (such as the number of players expected). In many cases,
column names are assumed the functions here, though I took pains to
make sure that different database and table names could be used. That
is, most functions use various wrapper and abstraction helper
functions that take database and table names as arguments, thus
allowing the user to more readily expand the code base to work for his
or her own databases (of course, column names have not been similarly
abstracted, due to time constraints).
** Conclusion
In some ways, what I attempted was the beginning of a library for
tournament-making, SQL-based code (this can be seen most clearly in
the use of helper functions like =keyword_statement_string= which take
different table names and SQL keywords such as "FROM" and "INSERT
INTO"). This clearly was beyond the scope of the assignment, but was
illuminating nonetheless, especially in that it forced me to delve
into the more obscure and powerful corner of Postgres.

