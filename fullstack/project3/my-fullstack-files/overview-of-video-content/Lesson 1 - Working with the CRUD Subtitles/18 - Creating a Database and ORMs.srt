0:00:00.160,0:00:03.250
So for this menu project, I want to[br]create an application where I can make

0:00:03.250,0:00:07.470
various restaurant menus with various[br]items, often within one application.

0:00:07.470,0:00:10.600
All restaurant menus in the general[br]sense contain the same thing.

0:00:10.600,0:00:14.860
Some have a few appetizers,[br]some entrees, a few desserts, and

0:00:14.860,0:00:16.149
of course some beverages.

0:00:16.149,0:00:19.570
To keep things simple, let's call[br]all of these things menu items.

0:00:19.570,0:00:23.170
And all of my menu items belong[br]to a specific restaurant menu.

0:00:23.170,0:00:25.260
It also would be helpful[br]to have a price and

0:00:25.260,0:00:27.830
brief description for[br]each of our menu items.

0:00:27.830,0:00:31.760
An important early design decision[br]to make is how to model my database.

0:00:31.760,0:00:34.310
There is more than one correct[br]way to structure a database, but

0:00:34.310,0:00:36.150
there is no need to make[br]things too complicated.

0:00:36.150,0:00:39.560
Let's walk through the process of[br]making a database layout together.

0:00:39.560,0:00:43.320
We have a restaurant table to represent[br]all of the restaurants in our database,

0:00:43.320,0:00:46.250
along with a corresponding name and[br]ID number.

0:00:46.250,0:00:48.280
Then we have a table of menu items.

0:00:48.280,0:00:53.820
Each menu item will have a name,[br]an ID, a description, a price, and

0:00:53.820,0:00:59.150
a course to categorize whether it is an[br]appetizer, entree, dessert or beverage.

0:00:59.150,0:01:02.610
We will also provide a restaurant[br]ID to assign a foreign key

0:01:02.610,0:01:05.319
relationship with our restaurant table.

0:01:05.319,0:01:05.910
Okay.[br]So

0:01:05.910,0:01:08.120
we've planned out how we[br]will design our database.

0:01:08.120,0:01:09.850
Now let's get to coding it up.

0:01:09.850,0:01:13.780
If you've used SQL before you might be[br]used to writing something like this.

0:01:13.780,0:01:17.040
If you're not an SQL expert it might[br]be a little hard to understand though.

0:01:17.040,0:01:19.280
Now there is nothing[br]wrong with this code, but

0:01:19.280,0:01:21.010
let's take a look at it for a second.

0:01:21.010,0:01:25.260
Using raw SQL we have this inquiries[br]to the database as strings.

0:01:25.260,0:01:29.670
This works, but our Python compiler has[br]no way of helping me if I make a typo or

0:01:29.670,0:01:31.670
reference a table that doesn't exist.

0:01:31.670,0:01:35.080
Every other data structure we use[br]in Python is some type of object.

0:01:35.080,0:01:39.255
So why not treat our database queries,[br]tables, and rows as objects as well.

0:01:39.255,0:01:42.905
Well this concern isn't a unique one,[br]and developers have created tools for

0:01:42.905,0:01:43.770
this very problem.

0:01:43.770,0:01:48.495
Object-Relational Mappers, or ORM's,[br]can be thought of like a translator.

0:01:48.495,0:01:51.235
Converting our code from[br]one form to another.

0:01:51.235,0:01:54.562
If we send off code written in Python or[br]any other preferred programming

0:01:54.562,0:01:59.802
language, it is transformed by the ORM[br]into SQL and sent off to our database.

0:01:59.802,0:02:03.182
The ORM also gets results[br]from an SQL statement and

0:02:03.182,0:02:05.812
allows us to use it as an object[br]from within our Python code.
