0:00:00.390,0:00:03.900
With SQLAlchemy, we can write[br]a single Python file to set up and

0:00:03.900,0:00:04.900
configure our database.

0:00:04.900,0:00:08.330
I will call this file database_setup.py.

0:00:08.330,0:00:12.770
Creating a database with SQLAlchemy[br]has four major coding components.

0:00:12.770,0:00:17.350
The configuration code, which is what we[br]use to import all the necessary modules.

0:00:17.350,0:00:20.730
The class code that we use to[br]represent our data in Python.

0:00:20.730,0:00:24.240
The table that represents[br]the specific table in our database.

0:00:24.240,0:00:27.600
And the mapper that connects the columns[br]of our table to the class that

0:00:27.600,0:00:28.720
represents it.

0:00:28.720,0:00:31.810
Our configuration code sets up all[br]of the dependencies needed for

0:00:31.810,0:00:35.380
my database and[br]binds my code to the SQLAlchemy engine.

0:00:35.380,0:00:39.020
For most cases, this code doesn't[br]change much from project to project.

0:00:39.020,0:00:42.770
We also have to create an instance[br]of a class called declarative base,

0:00:42.770,0:00:46.220
in order for our class to inherit[br]all the features of SQLAlchemy.

0:00:46.220,0:00:49.150
In addition, we need to add some[br]configuration code at the end of

0:00:49.150,0:00:51.920
our Python file to connect[br]to an existing database.

0:00:51.920,0:00:53.570
Or in this case, create a new one.

0:00:53.570,0:00:55.565
This might not make much[br]sense right now, so

0:00:55.565,0:00:57.720
let's jump into writing[br]the configuration code.

0:00:57.720,0:01:00.590
Open a text editor like Sublime and[br]follow along.

0:01:00.590,0:01:04.200
You may have seen this import if you've[br]worked on a few Python projects before.

0:01:04.200,0:01:07.600
The sys module provides a number of[br]functions and variables that can be

0:01:07.600,0:01:11.170
used to manipulate different parts[br]of the Python run-time environment.

0:01:11.170,0:01:13.290
Next, we're going to import the column.

0:01:13.290,0:01:17.150
ForeignKey, Integer, and[br]String classes from SQLAlchemy.

0:01:17.150,0:01:19.820
These will come in handy when[br]we are writing our mapper code.

0:01:19.820,0:01:23.915
From the sqlalchemy.ext.declarative[br]library, we need to import our

0:01:23.915,0:01:28.060
declarative_base, which we will use[br]in the configuration and class code.

0:01:28.060,0:01:32.820
After that, we import relationship from[br]sqalchemy.orm in order to create our

0:01:32.820,0:01:34.350
foreign key relationships.

0:01:34.350,0:01:36.990
This, too, will be used when[br]we write up our mapper.

0:01:36.990,0:01:39.210
Let's also import[br]the create_engine class,

0:01:39.210,0:01:42.670
which we will use in our configuration[br]code at the end of the file.

0:01:42.670,0:01:44.770
This last piece of code isn't an import,[br]but

0:01:44.770,0:01:47.670
will help us get set up when we[br]begin to write our class code.

0:01:47.670,0:01:51.000
Let's make an instance of the[br]declarative_base class we just imported

0:01:51.000,0:01:52.560
and call it Base, for short.

0:01:52.560,0:01:55.910
The declarative_base will let[br]SQLAlchemy know that our classes

0:01:55.910,0:02:00.610
are special SQLAlchemy classes that[br]correspond to tables in our database.

0:02:00.610,0:02:03.940
At the end of our file,[br]we need to add two more lines of code.

0:02:03.940,0:02:06.770
We create an instance of[br]our create_engine class and

0:02:06.770,0:02:08.900
point to the database we will use.

0:02:08.900,0:02:10.400
Since we are using SQLite 3 for

0:02:10.400,0:02:14.100
this lesson, the create_engine will[br]create a new file that we can use

0:02:14.100,0:02:19.560
similarly to a more robust database[br]like MySQL or The last piece we need

0:02:19.560,0:02:23.880
is Base.metadata.create_all(engine),[br]which goes into the database and

0:02:23.880,0:02:26.950
adds the classes we will soon create[br]as new tables in our database.
