0:00:00.170,0:00:03.610
Now that we have an empty database,[br]let's populate it with some information.

0:00:03.610,0:00:06.730
With SQL, we would need to execute[br]an insert command with all of

0:00:06.730,0:00:09.360
the information we want it to[br]populate into our database.

0:00:09.360,0:00:10.408
Using SQLAlchemy,

0:00:10.408,0:00:13.990
creating a new database is as easy[br]as creating a new object in Python.

0:00:13.990,0:00:16.857
I will be executing these operations[br]from the Python show, but

0:00:16.857,0:00:19.249
they could also be done from[br]within a Python script.

0:00:19.249,0:00:22.598
We must first import the following[br]dependencies from SQLAlchemy, and

0:00:22.598,0:00:25.240
the empty database we created,[br]into our environment.

0:00:25.240,0:00:27.458
We will see what they[br]do in just a second.

0:00:27.458,0:00:30.120
From our database_setup.py[br]file that we created,

0:00:30.120,0:00:34.100
let's import our base restaurant,[br]and menu classes.

0:00:34.100,0:00:37.510
The create_engine function lets our[br]program know which database engine we

0:00:37.510,0:00:38.890
want to communicate with.

0:00:38.890,0:00:42.770
Then let's bind the engine to the base[br]class with the following command.

0:00:42.770,0:00:45.910
This command just makes the connections[br]between our class definitions and

0:00:45.910,0:00:48.490
the corresponding tables[br]within our database.

0:00:48.490,0:00:51.080
The next thing I'm going to do[br]is create a sessionmaker object.

0:00:51.080,0:00:54.830
This establishes a link of communication[br]between our code executions and

0:00:54.830,0:00:55.760
the engine we just created.

0:00:55.760,0:00:59.970
In order to create, read, update or[br]delete information on our database,

0:00:59.970,0:01:03.280
SQLAlchemy executes database[br]operations via an interface.

0:01:03.280,0:01:04.879
It's called a session.

0:01:04.879,0:01:08.010
A session allows us to write down all[br]the commands we want to execute, but

0:01:08.010,0:01:10.490
not send them to the database[br]until we call a commit.

0:01:10.490,0:01:12.210
Here, I'll show you what I mean.

0:01:12.210,0:01:16.190
I'm going to create an instance of a[br]DBSession and call it session for short.

0:01:16.190,0:01:18.810
From now on, when I want to[br]make a change to my database,

0:01:18.810,0:01:21.480
I can do it just by calling[br]a method from within session.

0:01:21.480,0:01:24.220
The DBSession object gives[br]me a staging zone for

0:01:24.220,0:01:27.210
all of the objects loaded into[br]a database session object.

0:01:27.210,0:01:30.730
Any change made to the objects in[br]the session won't be persisted into

0:01:30.730,0:01:33.530
the database until I[br]call session.commit.

0:01:33.530,0:01:35.120
Now as I promised,

0:01:35.120,0:01:39.080
making a new entry in our database is as[br]easy as making a new object in Python.

0:01:39.080,0:01:41.300
Take a look at these three[br]lines of example code and

0:01:41.300,0:01:44.630
watch as I implement them to create[br]a new restaurant in my database.

0:01:44.630,0:01:47.900
Following this example,[br]I'll make my first restaurant like so.

0:01:47.900,0:01:51.180
As you can see, it's just an instance[br]of my restaurant class with

0:01:51.180,0:01:54.330
a name attribute that I decided[br]to give it, Pizza Palace.

0:01:54.330,0:01:56.790
To persist my new restaurant[br]into the database,

0:01:56.790,0:01:58.890
I must do two more session operations.

0:01:58.890,0:02:02.660
First by calling session.add[br]my first restaurant,

0:02:02.660,0:02:06.230
my restaurant object is in the staging[br]zone to be added to the database.

0:02:06.230,0:02:09.990
Then with session.commit it's[br]now stored to my database.

0:02:09.990,0:02:11.350
But how do I know it worked?

0:02:11.350,0:02:14.420
Well, I can also use the session[br]to interact with my database and

0:02:14.420,0:02:15.830
see what's inside of it.

0:02:15.830,0:02:19.210
If I execute[br]session.query(Restaurant).all, I'm

0:02:19.210,0:02:21.300
asking my session to[br]go into the database,

0:02:21.300,0:02:23.795
find the table that corresponds[br]to the restaurant class and

0:02:23.795,0:02:27.735
find all the entires in that table and[br]return them in a list.

0:02:27.735,0:02:30.430
When I run this,[br]I get a response with something like,

0:02:30.430,0:02:35.650
database_setup.Restaurant object at and[br]some hexadecimal number.

0:02:35.650,0:02:39.420
This just lets us know that Python[br]found a restaurant in our database and

0:02:39.420,0:02:42.450
represents it as an object[br]at this location in memory.

0:02:42.450,0:02:45.730
I'm sure you're thinking, well that's[br]great but how's it useful to me?

0:02:45.730,0:02:48.800
We'll go into more detail about[br]the query method when we focus on

0:02:48.800,0:02:50.660
reading data out of our database.

0:02:50.660,0:02:53.990
So now, let's add a MenuItem[br]to our Pizza Palace menu.

0:02:53.990,0:02:56.860
Since our MenuItems all belong to[br]a Restaurant, and have a few more

0:02:56.860,0:03:00.330
attributes, we have to provide a bit[br]more information in our declaration.

0:03:00.330,0:03:03.860
I can create a Cheese Pizza by[br]executing the following command.

0:03:03.860,0:03:07.460
Notice that I provided all of the fields[br]of information for a MenuItem here and

0:03:07.460,0:03:11.330
specify the foreign key relationship[br]to the object name of my restaurant.

0:03:11.330,0:03:14.590
In order for this operation to work,[br]I didn't have to fill out every entry

0:03:14.590,0:03:19.910
unless I specified it as nullable equal[br]to false in our database_setup.py file.

0:03:19.910,0:03:23.260
Now let's run session.query[br]MenuItem .all to

0:03:23.260,0:03:26.530
see that an object now exists for[br]our cheese pizza item, as well.

0:03:26.530,0:03:28.770
Now that you know how to[br]add data to a database,

0:03:28.770,0:03:30.160
it's your turn to get[br]some practice at it.
