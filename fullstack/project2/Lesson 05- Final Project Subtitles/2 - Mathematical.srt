In designing your code,  it's important to understand the problem that you're solving.  So, let's think a bit about the math of tournaments.  If you'd like to skip straight ahead to the code, feel free, but  working through this may be helpful.  In an elimination style tournament,  each round eliminates half of the players from contention.  That means if you start out with n players,  it takes log to the base 2 n rounds to find a champion.  And the total number of matches played is n minus 1.  Like in this tournament here, there are eight entrants, A, B, C, D, E, F, G, H.  And finding a champion takes three rounds.  And sure enough, the binary log of 8 is 3.  There are four matches in the first round, two in the second, and  only one match in the third for a total of seven matches.  But how about in the non-elimination Swiss system?  For a given number of entrants, how many rounds does it  take to find a champion and how many total matches are played?  Let's take a specific example for a quiz.  Suppose there are 16 players.  How many rounds and how many matches will have to be played?  