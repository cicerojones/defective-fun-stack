#+STARTUP: indent
* prepare to pass tests
:PROPERTIES:
:ID:       391AFF00-9A9D-4F33-A04A-364A5BF1BE81
:END:
** original pass-test statements plus
print "1. Old matches can be deleted."

print "2. Player records can be deleted."

print "3. After deleting, countPlayers() returns zero."

print "4. After registering a player, countPlayers() returns 1."

print "5. Players can be registered and deleted."

print "6. Newly registered players appear in the standings with no matches."

print "7. After a match, players have updated standings."

print "8. After one match, players with one win are paired."

"Prevent rematches between players."

"allow ties"

"use Opponent Match Wins as criteria for breaking ties in ranking"

"Support more than one tournament in the database"

** new tests to be specified
*** "allow ties"
 Support games where a draw (tied game) is possible. This will require
 changing the arguments to reportMatch.
*** use Opponent Match Wins as criteria for breaking ties in ranking
 When two players have the same number of wins, rank them according to
 OMW (Opponent Match Wins), the total number of wins by players they
 have played against.

*** Support more than one tournament in the database
 Support more than one tournament in the database, so matches do not
 have to be deleted between tournaments. This will require
 distinguishing between “a registered player” and “a player who has
 entered in tournament #123”, so it will require changes to the
 database schema.

** common test path
Assuming two tables, one for matches and one for players
1. delete matches
2. delete players
3. register some number of players (taking just their name as
   argument?)
4. generate player_standings, from whatever data has been entered
5. destructure the player_standings object using list comprehension
6. using the player_ids using the row in the standings that
   corresponds to them, report a Match result, specifying a winner and loser
7. lastly, generate pairings for next round
** original testing template
Assuming two tables, one for matches and one for players

*** delete matches
*** delete players
*** register some number of players (taking just their name as argument?)
*** generate player_standings, from whatever data has been entered
*** destructure the player_standings object using list comprehension
*** report a Match result, specifying a winner and loser
using the player_ids using the row in the standings that corresponds to them, 
*** lastly, generate pairings for next round

** simple modified testing template
Assuming two tables, one for matches and one for players

*** delete matches
*** delete players
*** register some number of players

will need to add what tournament they are registering for
**** countPlayers function returns an aggregation
*** generate player_standings, from whatever data has been entered
will need to use multiple criteria to generate a valid ordering
**** player_standings returns rows
what should be the information contained in the row?
#+BEGIN_SRC python :session *Python* :results output :tangle yes
standings = playerStandings()
[(id1, name1, wins1, matches1), (id2, name2, wins2, matches2)] = standings
#+END_SRC
*** destructure the player_standings object to verify results
**** 
#+BEGIN_SRC python :session *Python* :results output :tangle yes
standings = playerStandings()
[id1, id2, id3, id4] = [row[0] for row in standings]
#+END_SRC
** more complex modifications to tests
*** report a Match result

will need to account for tied scores
using the player_ids using the row in the standings that corresponds to them
*** lastly, generate pairings for next round
#+BEGIN_SRC python :session *Python* :results output :tangle yes
pairings = swissPairings()
[(pid1, pname1, pid2, pname2), (pid3, pname3, pid4, pname4)] = pairings

correct_pairs = set([frozenset([id1, id3]), frozenset([id2, id4])])
actual_pairs = set([frozenset([pid1, pid2]), frozenset([pid3, pid4])])
#+END_SRC
* all-in-one (broken up) three rounds plus one round second tournament
:PROPERTIES:
:ID:       0F5A2AA2-E91D-4EE8-9E9D-A05773A6D4FD
:END:
** all this works when called in sequence
#+BEGIN_SRC python :session *Python* :results output :tangle yes

# registering a player also inserts a row for that player's record
new_registerPlayer("tourney_practice", "playerz", 'a', "tennis");
new_registerPlayer("tourney_practice", "playerz", 'b', "tennis");
new_registerPlayer("tourney_practice", "playerz", 'c', "tennis");
new_registerPlayer("tourney_practice", "playerz", 'd', "tennis");
new_registerPlayer("tourney_practice", "playerz", 'e', "tennis");
new_registerPlayer("tourney_practice", "playerz", 'f', "tennis");
new_registerPlayer("tourney_practice", "playerz", 'g', "tennis");
new_registerPlayer("tourney_practice", "playerz", 'h', "tennis");


# must register the participants of the first match.
# after that, the pairings of players will be determined by 
# running naive_swissPairings, the results of which will
# be used when reporting the next match results between those players
registerMatchParticipants("tourney_practice", "match_participants", "tennis", 1, 1, 2)
registerMatchParticipants("tourney_practice", "match_participants", "tennis", 1, 3, 4)
registerMatchParticipants("tourney_practice", "match_participants", "tennis", 1, 5, 6)
registerMatchParticipants("tourney_practice", "match_participants", "tennis", 1, 7, 8)

# scores are reported for a match number and for the notion of
# home vs. away players
registerScores("tourney_practice", "score_results", 1, 1, 0)
registerScores("tourney_practice", "score_results", 2, 0, 1)
registerScores("tourney_practice", "score_results", 3, 1, 0)
registerScores("tourney_practice", "score_results", 4, 0, 1)

# calculate the stats for the given tournament
log_round_results("tourney_practice", "tennis", 1)
set_all_OMW('tourney_practice')

# determine the pairings for the next round of the given tournament,
# both of which (the round number and the tournament name) are given
# as arguments
naive_swissPairings(2, "tennis")
#+END_SRC

#+RESULTS:
: 
: ... >>> >>> >>> >>> >>> >>> >>> >>> >>> ... ... ... ... >>> >>> >>> ... ... >>> >>> >>> >>> >>> ... >>> done


#+BEGIN_SRC python :session *Python* :results output :tangle yes
# enter results for round two
# must just get the match_id number right
registerScores("tourney_practice", "score_results", 5, 1, 0)
registerScores("tourney_practice", "score_results", 6, 0, 1)
registerScores("tourney_practice", "score_results", 7, 1, 0)
registerScores("tourney_practice", "score_results", 8, 0, 1)

log_round_results("tourney_practice", "tennis", 2)
set_all_OMW('tourney_practice')

naive_swissPairings(3, "tennis")
#+END_SRC

#+RESULTS:
: 
: ... >>> done

#+BEGIN_SRC python :session *Python* :results output :tangle yes
# enter results for round three
registerScores("tourney_practice", "score_results", 9, 1, 0)
registerScores("tourney_practice", "score_results", 10, 0, 1)
registerScores("tourney_practice", "score_results", 11, 1, 0)
registerScores("tourney_practice", "score_results", 12, 0, 1)

log_round_results("tourney_practice", "tennis", 3)
set_all_OMW('tourney_practice')
#+END_SRC

#+RESULTS:
: 
: >>> >>> >>> >>> >>> >>> done

#+BEGIN_SRC python :session *Python* :results output :tangle yes
# register players for a new tournament but using the same database
new_registerPlayer("tourney_practice", "playerz", 'allen', "soccer");
new_registerPlayer("tourney_practice", "playerz", 'beverly', "soccer");
new_registerPlayer("tourney_practice", "playerz", 'cleanth', "soccer");
new_registerPlayer("tourney_practice", "playerz", 'devon', "soccer");
new_registerPlayer("tourney_practice", "playerz", 'eldridge', "soccer");
new_registerPlayer("tourney_practice", "playerz", 'fatool', "soccer");
new_registerPlayer("tourney_practice", "playerz", 'g-money', "soccer");
new_registerPlayer("tourney_practice", "playerz", 'harold', "soccer");
#+END_SRC

#+RESULTS:

#+BEGIN_SRC python :session *Python* :results output :tangle yes
# setup the first round with predetermined matches
registerMatchParticipants("tourney_practice", "match_participants", "soccer", 1, 9, 10)
registerMatchParticipants("tourney_practice", "match_participants", "soccer", 1, 11, 12)
registerMatchParticipants("tourney_practice", "match_participants", "soccer", 1, 13, 14)
registerMatchParticipants("tourney_practice", "match_participants", "soccer", 1, 15, 16)

registerScores("tourney_practice", "score_results", 13, 1, 0)
registerScores("tourney_practice", "score_results", 14, 0, 1)
registerScores("tourney_practice", "score_results", 15, 1, 0)
registerScores("tourney_practice", "score_results", 16, 0, 1)

log_round_results("tourney_practice", "soccer", 1)
set_all_OMW('tourney_practice')


#+END_SRC

#+RESULTS:
: 
: >>> >>> >>> >>> >>> >>> >>> >>> >>> >>> >>> done

** will subsequent round in the soccer tournament work as well
#+BEGIN_SRC python :session *Python* :results output :tangle yes
naive_swissPairings(2, "soccer")

# include a tie and see what happens
registerScores("tourney_practice", "score_results", 17, 1, 1)
registerScores("tourney_practice", "score_results", 18, 0, 1)
registerScores("tourney_practice", "score_results", 19, 1, 0)
registerScores("tourney_practice", "score_results", 20, 0, 1)

log_round_results("tourney_practice", "soccer", 2)
set_all_OMW('tourney_practice')
#+END_SRC
#+RESULTS:
: 
: >>> ... >>> >>> >>> done

#+BEGIN_SRC python :session *Python* :results output :tangle yes
naive_swissPairings(3, "soccer")

registerScores("tourney_practice", "score_results", 21, 1, 0)
registerScores("tourney_practice", "score_results", 22, 0, 1)
registerScores("tourney_practice", "score_results", 23, 1, 0)
registerScores("tourney_practice", "score_results", 24, 0, 1)

log_round_results("tourney_practice", "soccer", 3)
set_all_OMW('tourney_practice')
#+END_SRC

#+RESULTS:
: 
: >>> >>> >>> done

* all-in-one three rounds plus one round second tournament
#+BEGIN_SRC python :session *Python* :results output :tangle yes

# registering a player also inserts a row for that player's record
new_registerPlayer("tourney_practice", "playerz", 'a', "tennis");
new_registerPlayer("tourney_practice", "playerz", 'b', "tennis");
new_registerPlayer("tourney_practice", "playerz", 'c', "tennis");
new_registerPlayer("tourney_practice", "playerz", 'd', "tennis");
new_registerPlayer("tourney_practice", "playerz", 'e', "tennis");
new_registerPlayer("tourney_practice", "playerz", 'f', "tennis");
new_registerPlayer("tourney_practice", "playerz", 'g', "tennis");
new_registerPlayer("tourney_practice", "playerz", 'h', "tennis");



registerMatchParticipants("tourney_practice", "match_participants", "tennis", 1, 1, 2)
registerMatchParticipants("tourney_practice", "match_participants", "tennis", 1, 3, 4)
registerMatchParticipants("tourney_practice", "match_participants", "tennis", 1, 5, 6)
registerMatchParticipants("tourney_practice", "match_participants", "tennis", 1, 7, 8)



registerScores("tourney_practice", "score_results", 1, 1, 0)
registerScores("tourney_practice", "score_results", 2, 0, 1)
registerScores("tourney_practice", "score_results", 3, 1, 0)
registerScores("tourney_practice", "score_results", 4, 0, 1)



log_round_results("tourney_practice", "tennis", 1)
set_all_OMW('tourney_practice')

naive_swissPairings(2, "tennis")


registerScores("tourney_practice", "score_results", 5, 1, 0)
registerScores("tourney_practice", "score_results", 6, 0, 1)
registerScores("tourney_practice", "score_results", 7, 1, 0)
registerScores("tourney_practice", "score_results", 8, 0, 1)

log_round_results("tourney_practice", "tennis", 2)
set_all_OMW('tourney_practice')

naive_swissPairings(3, "tennis")

registerScores("tourney_practice", "score_results", 9, 1, 0)
registerScores("tourney_practice", "score_results", 10, 0, 1)
registerScores("tourney_practice", "score_results", 11, 1, 0)
registerScores("tourney_practice", "score_results", 12, 0, 1)

log_round_results("tourney_practice", "tennis", 3)
set_all_OMW('tourney_practice')

### register players for soccer tournament
new_registerPlayer("tourney_practice", "playerz", 'allen', "soccer");
new_registerPlayer("tourney_practice", "playerz", 'beverly', "soccer");
new_registerPlayer("tourney_practice", "playerz", 'cleanth', "soccer");
new_registerPlayer("tourney_practice", "playerz", 'devon', "soccer");
new_registerPlayer("tourney_practice", "playerz", 'eldridge', "soccer");
new_registerPlayer("tourney_practice", "playerz", 'fatool', "soccer");
new_registerPlayer("tourney_practice", "playerz", 'g-money', "soccer");
new_registerPlayer("tourney_practice", "playerz", 'harold', "soccer");

registerMatchParticipants("tourney_practice", "match_participants", "soccer", 1, 9, 10)
registerMatchParticipants("tourney_practice", "match_participants", "soccer", 1, 11, 12)
registerMatchParticipants("tourney_practice", "match_participants", "soccer", 1, 13, 14)
registerMatchParticipants("tourney_practice", "match_participants", "soccer", 1, 15, 16)

## watch out for ties in the first round
registerScores("tourney_practice", "score_results", 13, 1, 0)
registerScores("tourney_practice", "score_results", 14, 0, 1)
registerScores("tourney_practice", "score_results", 15, 1, 0)
registerScores("tourney_practice", "score_results", 16, 0, 1)

log_round_results("tourney_practice", "soccer", 1)
set_all_OMW('tourney_practice')

naive_swissPairings(2, "soccer")

## 
registerScores("tourney_practice", "score_results", 17, 1, 1)
registerScores("tourney_practice", "score_results", 18, 0, 1)
registerScores("tourney_practice", "score_results", 19, 1, 0)
registerScores("tourney_practice", "score_results", 20, 0, 1)

log_round_results("tourney_practice", "soccer", 2)
set_all_OMW('tourney_practice')

naive_swissPairings(3, "soccer")

registerScores("tourney_practice", "score_results", 21, 1, 0)
registerScores("tourney_practice", "score_results", 22, 0, 1)
registerScores("tourney_practice", "score_results", 23, 1, 0)
registerScores("tourney_practice", "score_results", 24, 0, 1)

log_round_results("tourney_practice", "soccer", 3)
set_all_OMW('tourney_practice')
#+END_SRC

#+RESULTS:


* [#A] in two pieces (will work as one Python module, tho)
** Players, Matches, Scores, for 3 rounds; new Players
#+BEGIN_SRC python :session *Python* :results output :tangle yes
new_registerPlayer("tourney_practice", "playerz", 'a', "tennis")
new_registerPlayer("tourney_practice", "playerz", 'b', "tennis")
new_registerPlayer("tourney_practice", "playerz", 'c', "tennis")
new_registerPlayer("tourney_practice", "playerz", 'd', "tennis")
new_registerPlayer("tourney_practice", "playerz", 'e', "tennis")
new_registerPlayer("tourney_practice", "playerz", 'f', "tennis")
new_registerPlayer("tourney_practice", "playerz", 'g', "tennis")
new_registerPlayer("tourney_practice", "playerz", 'h', "tennis")

registerMatchParticipants("tourney_practice", "match_participants", "tennis", 1, 1, 2)
registerMatchParticipants("tourney_practice", "match_participants", "tennis", 1, 3, 4)
registerMatchParticipants("tourney_practice", "match_participants", "tennis", 1, 5, 6)
registerMatchParticipants("tourney_practice", "match_participants", "tennis", 1, 7, 8)

registerScores("tourney_practice", "score_results", 1, 1, 0)
registerScores("tourney_practice", "score_results", 2, 0, 1)
registerScores("tourney_practice", "score_results", 3, 1, 0)
registerScores("tourney_practice", "score_results", 4, 0, 1)

log_round_results("tourney_practice", "tennis", 1)
set_all_OMW('tourney_practice')

naive_swissPairings(2, "tennis")

registerScores("tourney_practice", "score_results", 5, 1, 0)
registerScores("tourney_practice", "score_results", 6, 0, 1)
registerScores("tourney_practice", "score_results", 7, 1, 0)
registerScores("tourney_practice", "score_results", 8, 0, 1)

log_round_results("tourney_practice", "tennis", 2)
set_all_OMW('tourney_practice')

naive_swissPairings(3, "tennis")

registerScores("tourney_practice", "score_results", 9, 1, 0)
registerScores("tourney_practice", "score_results", 10, 0, 1)
registerScores("tourney_practice", "score_results", 11, 1, 0)
registerScores("tourney_practice", "score_results", 12, 0, 1)

log_round_results("tourney_practice", "tennis", 3)
set_all_OMW('tourney_practice')


# registerMatchParticipants("tourney_practice", "match_participants", "soccer", 1, 9, 10)
# registerMatchParticipants("tourney_practice", "match_participants", "soccer", 1, 11, 12)
# registerMatchParticipants("tourney_practice", "match_participants", "soccer", 1, 13, 14)
# registerMatchParticipants("tourney_practice", "match_participants", "soccer", 1, 15, 16)
#+END_SRC

#+RESULTS:
: 
: >>> >>> >>> >>> >>> >>> >>> >>> >>> >>> >>> >>> >>> >>> >>> >>> >>> >>> >>> done
: >>> >>> >>> >>> >>> >>> >>> >>> done
: done
** 
#+BEGIN_SRC python :session *Python* :results output :tangle yes
new_registerPlayer("tourney_practice", "playerz", 'allen', "soccer")
new_registerPlayer("tourney_practice", "playerz", 'beverly', "soccer")
new_registerPlayer("tourney_practice", "playerz", 'cleanth', "soccer")
new_registerPlayer("tourney_practice", "playerz", 'devon', "soccer")
new_registerPlayer("tourney_practice", "playerz", 'eldridge', "soccer")
new_registerPlayer("tourney_practice", "playerz", 'fatool', "soccer")
new_registerPlayer("tourney_practice", "playerz", 'g-money', "soccer")
new_registerPlayer("tourney_practice", "playerz", 'harold', "soccer")

registerMatchParticipants("tourney_practice", "match_participants", "soccer", 1, 9, 10)
registerMatchParticipants("tourney_practice", "match_participants", "soccer", 1, 11, 12)
registerMatchParticipants("tourney_practice", "match_participants", "soccer", 1, 13, 14)
registerMatchParticipants("tourney_practice", "match_participants", "soccer", 1, 15, 16)

registerScores("tourney_practice", "score_results", 13, 1, 0)
registerScores("tourney_practice", "score_results", 14, 0, 1)
registerScores("tourney_practice", "score_results", 15, 1, 0)
registerScores("tourney_practice", "score_results", 16, 0, 1)

log_round_results("tourney_practice", "soccer", 1)
set_all_OMW('tourney_practice')

naive_swissPairings(2, "soccer")

## 
registerScores("tourney_practice", "score_results", 17, 1, 1)
registerScores("tourney_practice", "score_results", 18, 0, 1)
registerScores("tourney_practice", "score_results", 19, 1, 0)
registerScores("tourney_practice", "score_results", 20, 0, 1)

log_round_results("tourney_practice", "soccer", 2)
set_all_OMW('tourney_practice')

naive_swissPairings(3, "soccer")

registerScores("tourney_practice", "score_results", 21, 1, 0)
registerScores("tourney_practice", "score_results", 22, 0, 1)
registerScores("tourney_practice", "score_results", 23, 1, 0)
registerScores("tourney_practice", "score_results", 24, 0, 1)

log_round_results("tourney_practice", "soccer", 3)
set_all_OMW('tourney_practice')
#+END_SRC

#+RESULTS:
: 
: >>> >>> >>> >>> >>> >>> >>> >>> >>> >>> >>> >>> >>> >>> >>> >>> >>> >>> >>> done
: >>> >>> >>> ... >>> done
: done

* run the sql setup (drop and create tables and functions)
:PROPERTIES:
:ID:       7C9D73E5-FD02-45DD-8801-1C34C5627211
:END:
#+BEGIN_SRC sql :engine postgresql :database tourney_practice
-- only used for restarting with clean player ids
DROP TABLE playerz CASCADE; 
DROP TABLE match_participants CASCADE; 
DROP TABLE matchez CASCADE;
DROP TABLE score_results; 
DROP TABLE player_recordz CASCADE;

-- matches have id number, a tournament name and a round number
-- players have an id number and a name; 
-- theoretically can be in any tournaments? 
-- (need to distinguish btwn different results in different tournaments, 
-- so must add tournament name when registering)
CREATE TABLE playerz (
       player_id serial PRIMARY KEY,
       player_name text not null,
       tournament_name text 
);

-- matches have participants, arbitrarily assigned to home and away categories
CREATE TABLE match_participants (
--     match_id int REFERENCES matchez (match_id),
       match_id serial PRIMARY KEY,
       home int REFERENCES playerz (player_id),
       away int REFERENCES playerz (player_id));

CREATE TABLE matchez(
--       match_id serial PRIMARY KEY,
       match_id int REFERENCES match_participants (match_id),
--       tournament_name text not null,
       tournament_name text DEFAULT 'none',
       round int); 

-- results of matches have a score for the home and away players
CREATE TABLE score_results (
       match_id int REFERENCES match_participants (match_id),
       home_score int,
       away_score int);

-- players have an amount of wins, losses and draws,
-- in cases where draws are possible, players also have points taking
-- this possibility into account.
-- finally, all players have an OMW score, which is the sum of the points
-- of those players they have faced
CREATE TABLE player_recordz (
       player_id int REFERENCES playerz (player_id),
       tournament_name text,
       wins int DEFAULT 0,
       losses int DEFAULT 0,
       draws int DEFAULT 0,
       points int DEFAULT 0,
       OMW int DEFAULT 0);

-- a complete view of all tournaments shows any matches registered, 
-- as well as the scores in those matches
CREATE VIEW tournament_matches AS
select a.match_id, a.tournament_name, a.round, b.home, b.away, c.home_score, c.away_score
from matchez as a, match_participants as b, score_results as c
where a.match_id = b.match_id
AND b.match_id = c.match_id;

-- a complete view of a player shows the id/name as well as the various 
-- statistics already contained in player_recordz

CREATE VIEW player_tables AS
select a.player_id, a.player_name, a.tournament_name, b.wins, b.losses, b.draws, b.points, b.OMW
from playerz as a, player_recordz as b
where a.player_id = b.player_id;

-- to be able to reflect the results of matches in player stats, 
-- we need to distinguish the various kinds of wins, losses 
-- (and any draws if the tournament allows them)

-- the following update functions need to be called in the proper way 
-- and at the proper time (i.e. at the end of rounds of a particular tournament)
-- right now, there is the possibility of over-tabulating points if all matches 
-- for any particular rounds have not been registered yet
CREATE OR REPLACE FUNCTION initialize_player_rec() RETURNS TRIGGER AS $$
       BEGIN
	INSERT INTO player_recordz (player_id) VALUES (NEW.player_id);
	RETURN NEW;
       END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER initialize_player_rec
       AFTER INSERT ON playerz FOR EACH row EXECUTE PROCEDURE
       initialize_player_rec();

CREATE OR REPLACE FUNCTION initialize_matchez() RETURNS TRIGGER AS $$
       BEGIN
	INSERT INTO matchez (match_id) VALUES (NEW.match_id);
	RETURN NEW;
       END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER initialize_match_participants
       AFTER INSERT ON match_participants FOR EACH row EXECUTE PROCEDURE
       initialize_matchez();

-- CREATE OR REPLACE FUNCTION log_draws(integer) RETURNS VOID AS $$
--        UPDATE player_recordz SET draws = draws + 1
--        from tournament_matches as a 
--        WHERE a.home_score = a.away_score
--        AND (a.home = player_id OR a.away = player_id)
--        AND a.round = $1;
-- $$ LANGUAGE SQL;

CREATE OR REPLACE FUNCTION log_draws(round_no integer, tournament_name text) RETURNS VOID AS $$
       UPDATE player_recordz SET draws = draws + 1
       from tournament_matches as a 
       WHERE a.home_score = a.away_score
       AND (a.home = player_id OR a.away = player_id)
       AND a.round = $1 AND a.tournament_name = $2
$$ LANGUAGE SQL;

CREATE OR REPLACE FUNCTION log_away_wins(round_no integer, tournament_name text) RETURNS VOID AS $$
       UPDATE player_recordz SET wins = wins + 1
       from tournament_matches as a 
       WHERE a.home_score < a.away_score
       AND a.away = player_id
       AND a.round = $1 AND a.tournament_name = $2
$$ LANGUAGE SQL;

CREATE OR REPLACE FUNCTION log_away_losses(round_no integer, tournament_name text) RETURNS VOID AS $$
       UPDATE player_recordz SET losses = losses + 1
       from tournament_matches as a 
       WHERE a.home_score > a.away_score
       AND a.away = player_id
       AND a.round = $1 AND a.tournament_name = $2
$$ LANGUAGE SQL;

CREATE OR REPLACE FUNCTION log_home_wins(round_no integer, tournament_name text) RETURNS VOID AS $$
       UPDATE player_recordz SET wins = wins + 1
       from tournament_matches as a 
       WHERE a.home_score > a.away_score
       AND a.home = player_id
       AND a.round = $1 AND a.tournament_name = $2
$$ LANGUAGE SQL;

CREATE OR REPLACE FUNCTION log_home_losses(round_no integer, tournament_name text) RETURNS VOID AS $$
       UPDATE player_recordz SET losses = losses + 1
       from tournament_matches as a 
       WHERE a.home_score < a.away_score
       AND a.home = player_id
       AND a.round = $1 AND a.tournament_name = $2
$$ LANGUAGE SQL;

-- at the end of each round we want to tabulate the number of points for all participants
CREATE OR REPLACE FUNCTION update_points() RETURNS VOID AS $$
       UPDATE player_recordz 
       SET points = (wins * 3) + draws;
$$ LANGUAGE SQL;


-- we want to create tables collating all the opponents a given player has faced
CREATE OR REPLACE FUNCTION players_matches (integer) RETURNS TABLE (opposing_player int) AS $$
       select 
       	      CASE WHEN a.away = $1 THEN a.home
	      	   WHEN a.home = $1 THEN a.away
		   ELSE NULL
		END as opposing_player
FROM match_participants as a;
$$ LANGUAGE SQL;

CREATE OR REPLACE FUNCTION player_OMW (integer) RETURNS TABLE (opponent int, opponent_OMW int) AS $$
       select opposing_player, a.points FROM players_matches($1) JOIN player_tables as A
       ON opposing_player = player_id
       WHERE opposing_player IS NOT NULL;
$$ LANGUAGE SQL;

CREATE OR REPLACE FUNCTION set_omw (integer) RETURNS VOID AS $$
       UPDATE player_recordz SET omw = (select sum(opponent_OMW) FROM player_omw($1))
       WHERE player_id = $1;
$$ LANGUAGE SQL;

CREATE OR REPLACE FUNCTION set_all_OMW() RETURNS VOID AS $$
-- problematic to do this
       select * from set_OMW(1);
       select * from set_OMW(2);
       select * from set_OMW(3);
       select * from set_OMW(4);
       select * from set_OMW(5);
       select * from set_OMW(6);
       select * from set_OMW(7);
       select * from set_OMW(8);
$$ LANGUAGE SQL;


-- CREATE OR REPLACE FUNCTION log__records(round integer, tournament_name text) RETURNS VOID AS $$
--        SELECT log_named_draws($1, $2);
--        -- SELECT log_home_losses($1);
--        -- SELECT log_home_wins($1);
--        -- SELECT log_away_losses($1);
--        -- SELECT log_away_wins($1);
--        -- SELECT log_draws($1);
--        SELECT update_points();
-- $$ LANGUAGE SQL;



-- -- uses a $name$ syntax erroneously?
-- CREATE OR REPLACE FUNCTION log_records(round round_no integer, tournament_name text) RETURNS VOID as $log_records
--        SELECT log_home_losses($1, $2);
--        SELECT log_home_wins($1, $2);
--        SELECT log_away_losses($1, $2);
--        SELECT log_away_wins($1, $2);
--        SELECT log_draws($1, $2);
--        SELECT update_points();
--        $log_records$ LANGUAGE SQL;

-- uses a $name$ syntax erroneously?
CREATE OR REPLACE FUNCTION log_records(round_no integer, tournament_name text) RETURNS VOID as $$
       SELECT log_home_losses($1, $2);
       SELECT log_home_wins($1, $2);
       SELECT log_away_losses($1, $2);
       SELECT log_away_wins($1, $2);
       SELECT log_draws($1, $2);
       SELECT update_points();
$$ LANGUAGE SQL;


#+END_SRC

#+RESULTS:
| DROP TABLE      |
|-----------------|
| DROP TABLE      |
| DROP TABLE      |
| DROP TABLE      |
| DROP TABLE      |
| CREATE TABLE    |
| CREATE TABLE    |
| CREATE TABLE    |
| CREATE TABLE    |
| CREATE TABLE    |
| CREATE VIEW     |
| CREATE VIEW     |
| CREATE FUNCTION |
| CREATE TRIGGER  |
| CREATE FUNCTION |
| CREATE TRIGGER  |
| CREATE FUNCTION |
| CREATE FUNCTION |
| CREATE FUNCTION |
| CREATE FUNCTION |
| CREATE FUNCTION |
| CREATE FUNCTION |
| CREATE FUNCTION |
| CREATE FUNCTION |
| CREATE FUNCTION |
| CREATE FUNCTION |
| CREATE FUNCTION |

* view the tables
:PROPERTIES:
:ID:       1A0883C1-05E6-4122-BA21-66DA3D3AA31D
:END:
#+BEGIN_SRC sql :engine postgresql :database tourney_practice
select * from matchez;
select * from playerz;
select * from match_participants;
select * from score_results;
select * from player_tables ORDER BY tournament_name, points DESC, omw DESC;
#+END_SRC

#+RESULTS:
|  match_id | tournament_name |           round |      |        |       |        |     |
|-----------+-----------------+-----------------+------+--------+-------+--------+-----|
|         1 | tennis          |               1 |      |        |       |        |     |
|         2 | tennis          |               1 |      |        |       |        |     |
|         3 | tennis          |               1 |      |        |       |        |     |
|         4 | tennis          |               1 |      |        |       |        |     |
|         5 | tennis          |               2 |      |        |       |        |     |
|         6 | tennis          |               2 |      |        |       |        |     |
|         7 | tennis          |               2 |      |        |       |        |     |
|         8 | tennis          |               2 |      |        |       |        |     |
|         9 | tennis          |               3 |      |        |       |        |     |
|        10 | tennis          |               3 |      |        |       |        |     |
|        11 | tennis          |               3 |      |        |       |        |     |
|        12 | tennis          |               3 |      |        |       |        |     |
|        13 | soccer          |               1 |      |        |       |        |     |
|        14 | soccer          |               1 |      |        |       |        |     |
|        15 | soccer          |               1 |      |        |       |        |     |
|        16 | soccer          |               1 |      |        |       |        |     |
|        17 | soccer          |               2 |      |        |       |        |     |
|        18 | soccer          |               2 |      |        |       |        |     |
|        19 | soccer          |               2 |      |        |       |        |     |
|        20 | soccer          |               2 |      |        |       |        |     |
|        21 | soccer          |               3 |      |        |       |        |     |
|        22 | soccer          |               3 |      |        |       |        |     |
|        23 | soccer          |               3 |      |        |       |        |     |
|        24 | soccer          |               3 |      |        |       |        |     |
| player_id | player_name     | tournament_name |      |        |       |        |     |
|         1 | a               |          tennis |      |        |       |        |     |
|         2 | b               |          tennis |      |        |       |        |     |
|         3 | c               |          tennis |      |        |       |        |     |
|         4 | d               |          tennis |      |        |       |        |     |
|         5 | e               |          tennis |      |        |       |        |     |
|         6 | f               |          tennis |      |        |       |        |     |
|         7 | g               |          tennis |      |        |       |        |     |
|         8 | h               |          tennis |      |        |       |        |     |
|         9 | allen           |          soccer |      |        |       |        |     |
|        10 | beverly         |          soccer |      |        |       |        |     |
|        11 | cleanth         |          soccer |      |        |       |        |     |
|        12 | devon           |          soccer |      |        |       |        |     |
|        13 | eldridge        |          soccer |      |        |       |        |     |
|        14 | fatool          |          soccer |      |        |       |        |     |
|        15 | g-money         |          soccer |      |        |       |        |     |
|        16 | harold          |          soccer |      |        |       |        |     |
|  match_id | home            |            away |      |        |       |        |     |
|         1 | 1               |               2 |      |        |       |        |     |
|         2 | 3               |               4 |      |        |       |        |     |
|         3 | 5               |               6 |      |        |       |        |     |
|         4 | 7               |               8 |      |        |       |        |     |
|         5 | 1               |               5 |      |        |       |        |     |
|         6 | 4               |               8 |      |        |       |        |     |
|         7 | 2               |               7 |      |        |       |        |     |
|         8 | 3               |               6 |      |        |       |        |     |
|         9 | 1               |               8 |      |        |       |        |     |
|        10 | 5               |               4 |      |        |       |        |     |
|        11 | 2               |               6 |      |        |       |        |     |
|        12 | 7               |               3 |      |        |       |        |     |
|        13 | 9               |              10 |      |        |       |        |     |
|        14 | 11              |              12 |      |        |       |        |     |
|        15 | 13              |              14 |      |        |       |        |     |
|        16 | 15              |              16 |      |        |       |        |     |
|        17 | 16              |              12 |      |        |       |        |     |
|        18 | 13              |               9 |      |        |       |        |     |
|        19 | 15              |              10 |      |        |       |        |     |
|        20 | 11              |              14 |      |        |       |        |     |
|        21 | 9               |              16 |      |        |       |        |     |
|        22 | 12              |              13 |      |        |       |        |     |
|        23 | 15              |              14 |      |        |       |        |     |
|        24 | 10              |              11 |      |        |       |        |     |
|  match_id | home_score      |      away_score |      |        |       |        |     |
|         1 | 1               |               0 |      |        |       |        |     |
|         2 | 0               |               1 |      |        |       |        |     |
|         3 | 1               |               0 |      |        |       |        |     |
|         4 | 0               |               1 |      |        |       |        |     |
|         5 | 1               |               0 |      |        |       |        |     |
|         6 | 0               |               1 |      |        |       |        |     |
|         7 | 1               |               0 |      |        |       |        |     |
|         8 | 0               |               1 |      |        |       |        |     |
|         9 | 1               |               0 |      |        |       |        |     |
|        10 | 0               |               1 |      |        |       |        |     |
|        11 | 1               |               0 |      |        |       |        |     |
|        12 | 0               |               1 |      |        |       |        |     |
|        13 | 1               |               0 |      |        |       |        |     |
|        14 | 0               |               1 |      |        |       |        |     |
|        15 | 1               |               0 |      |        |       |        |     |
|        16 | 0               |               1 |      |        |       |        |     |
|        17 | 1               |               1 |      |        |       |        |     |
|        18 | 0               |               1 |      |        |       |        |     |
|        19 | 1               |               0 |      |        |       |        |     |
|        20 | 0               |               1 |      |        |       |        |     |
|        21 | 1               |               0 |      |        |       |        |     |
|        22 | 0               |               1 |      |        |       |        |     |
|        23 | 1               |               0 |      |        |       |        |     |
|        24 | 0               |               1 |      |        |       |        |     |
| player_id | player_name     | tournament_name | wins | losses | draws | points | omw |
|         9 | allen           |          soccer |    3 |      0 |     0 |      9 |  10 |
|        13 | eldridge        |          soccer |    2 |      1 |     0 |      6 |  16 |
|        15 | g-money         |          soccer |    2 |      1 |     0 |      6 |   7 |
|        16 | harold          |          soccer |    1 |      1 |     1 |      4 |  19 |
|        12 | devon           |          soccer |    1 |      1 |     1 |      4 |  13 |
|        14 | fatool          |          soccer |    1 |      2 |     0 |      3 |  15 |
|        11 | cleanth         |          soccer |    1 |      2 |     0 |      3 |   7 |
|        10 | beverly         |          soccer |    0 |      3 |     0 |      0 |  18 |
|         1 | a               |          tennis |    3 |      0 |     0 |      9 |  15 |
|         8 | h               |          tennis |    2 |      1 |     0 |      6 |  15 |
|         2 | b               |          tennis |    2 |      1 |     0 |      6 |  12 |
|         4 | d               |          tennis |    2 |      1 |     0 |      6 |  12 |
|         5 | e               |          tennis |    1 |      2 |     0 |      3 |  18 |
|         6 | f               |          tennis |    1 |      2 |     0 |      3 |  12 |
|         3 | c               |          tennis |    1 |      2 |     0 |      3 |   9 |
|         7 | g               |          tennis |    0 |      3 |     0 |      0 |  15 |

