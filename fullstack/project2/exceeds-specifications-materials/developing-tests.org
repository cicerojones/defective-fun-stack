* new
** developing exceeds specifications
*** SQL schema (with opening DROPS)
#+BEGIN_SRC sql :engine postgresql :database tourney_practice
-- only used for restarting with clean player ids
DROP TABLE playerz CASCADE; 
DROP TABLE match_participants CASCADE; 
DROP TABLE matchez CASCADE;
DROP TABLE score_results; 
DROP TABLE player_recordz CASCADE;
#+END_SRC

#+RESULTS:
| DROP TABLE |
|------------|
| DROP TABLE |
| DROP TABLE |
| DROP TABLE |
| DROP TABLE |

#+BEGIN_SRC sql :engine postgresql :database tourney_practice
-- matches have id number, a tournament name and a round number
-- players have an id number and a name; 
-- theoretically can be in any tournaments? 
-- (need to distinguish btwn different results in different tournaments)
CREATE TABLE playerz (
       player_id serial PRIMARY KEY,
       player_name text not null);

-- matches have participants, arbitrarily assigned to home and away categories
CREATE TABLE match_participants (
--     match_id int REFERENCES matchez (match_id),
       match_id serial PRIMARY KEY,
       home int REFERENCES playerz (player_id),
       away int REFERENCES playerz (player_id));

CREATE TABLE matchez(
--       match_id serial PRIMARY KEY,
       match_id int REFERENCES match_participants (match_id),
--       tournament_name text not null,
       tournament_name text DEFAULT 'none',
       round int); 

-- results of matches have a score for the home and away players
CREATE TABLE score_results (
       match_id int REFERENCES match_participants (match_id),
       home_score int,
       away_score int);

-- players have an amount of wins, losses and draws,
-- in cases where draws are possible, players also have points taking
-- this possibility into account.
-- finally, all players have an OMW score, which is the sum of the points
-- of those players they have faced
CREATE TABLE player_recordz (
       player_id int REFERENCES playerz (player_id),
       wins int DEFAULT 0,
       losses int DEFAULT 0,
       draws int DEFAULT 0,
       points int DEFAULT 0,
       OMW int DEFAULT 0);

-- a complete view of all tournaments shows any matches registered, 
-- as well as the scores in those matches
CREATE VIEW tournament_matches AS
select a.match_id, a.tournament_name, a.round, b.home, b.away, c.home_score, c.away_score
from matchez as a, match_participants as b, score_results as c
where a.match_id = b.match_id
AND b.match_id = c.match_id;

-- a complete view of a player shows the id/name as well as the various 
-- statistics already contained in player_recordz

CREATE VIEW player_tables AS
select a.player_id, a.player_name, b.wins, b.losses, b.draws, b.points, b.OMW
from playerz as a, player_recordz as b
where a.player_id = b.player_id;


-- to be able to reflect the results of matches in player stats, 
-- we need to distinguish the various kinds of wins, losses 
-- (and any draws if the tournament allows them)

-- the following update functions need to be called in the proper way 
-- and at the proper time (i.e. at the end of rounds of a particular tournament)
-- right now, there is the possibility of over-tabulating points if all matches 
-- for any particular rounds have not been registered yet
CREATE OR REPLACE FUNCTION initialize_player_rec() RETURNS TRIGGER AS $$
       BEGIN
	INSERT INTO player_recordz (player_id) VALUES (NEW.player_id);
	RETURN NEW;
       END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER initialize_player_rec
       AFTER INSERT ON playerz FOR EACH row EXECUTE PROCEDURE
       initialize_player_rec();

CREATE OR REPLACE FUNCTION initialize_matchez() RETURNS TRIGGER AS $$
       BEGIN
	INSERT INTO matchez (match_id) VALUES (NEW.match_id);
	RETURN NEW;
       END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER initialize_match_participants
       AFTER INSERT ON match_participants FOR EACH row EXECUTE PROCEDURE
       initialize_matchez();

-- CREATE OR REPLACE FUNCTION log_draws(integer) RETURNS VOID AS $$
--        UPDATE player_recordz SET draws = draws + 1
--        from tournament_matches as a 
--        WHERE a.home_score = a.away_score
--        AND (a.home = player_id OR a.away = player_id)
--        AND a.round = $1;
-- $$ LANGUAGE SQL;

CREATE OR REPLACE FUNCTION log_draws(round_no integer, tournament_name text) RETURNS VOID AS $$
       UPDATE player_recordz SET draws = draws + 1
       from tournament_matches as a 
       WHERE a.home_score = a.away_score
       AND (a.home = player_id OR a.away = player_id)
       AND a.round = $1 AND a.tournament_name = $2
$$ LANGUAGE SQL;

CREATE OR REPLACE FUNCTION log_away_wins(round_no integer, tournament_name text) RETURNS VOID AS $$
       UPDATE player_recordz SET wins = wins + 1
       from tournament_matches as a 
       WHERE a.home_score < a.away_score
       AND a.away = player_id
       AND a.round = $1 AND a.tournament_name = $2
$$ LANGUAGE SQL;

CREATE OR REPLACE FUNCTION log_away_losses(round_no integer, tournament_name text) RETURNS VOID AS $$
       UPDATE player_recordz SET losses = losses + 1
       from tournament_matches as a 
       WHERE a.home_score > a.away_score
       AND a.away = player_id
       AND a.round = $1 AND a.tournament_name = $2
$$ LANGUAGE SQL;

CREATE OR REPLACE FUNCTION log_home_wins(round_no integer, tournament_name text) RETURNS VOID AS $$
       UPDATE player_recordz SET wins = wins + 1
       from tournament_matches as a 
       WHERE a.home_score > a.away_score
       AND a.home = player_id
       AND a.round = $1 AND a.tournament_name = $2
$$ LANGUAGE SQL;

CREATE OR REPLACE FUNCTION log_home_losses(round_no integer, tournament_name text) RETURNS VOID AS $$
       UPDATE player_recordz SET losses = losses + 1
       from tournament_matches as a 
       WHERE a.home_score < a.away_score
       AND a.home = player_id
       AND a.round = $1 AND a.tournament_name = $2
$$ LANGUAGE SQL;

-- at the end of each round we want to tabulate the number of points for all participants
CREATE OR REPLACE FUNCTION update_points() RETURNS VOID AS $$
       UPDATE player_recordz 
       SET points = (wins * 3) + draws;
$$ LANGUAGE SQL;


-- we want to create tables collating all the opponents a given player has faced
CREATE OR REPLACE FUNCTION players_matches (integer) RETURNS TABLE (opposing_player int) AS $$
       select 
       	      CASE WHEN a.away = $1 THEN a.home
	      	   WHEN a.home = $1 THEN a.away
		   ELSE NULL
		END as opposing_player
FROM match_participants as a;
$$ LANGUAGE SQL;

CREATE OR REPLACE FUNCTION player_OMW (integer) RETURNS TABLE (opponent int, opponent_OMW int) AS $$
       select opposing_player, a.points FROM players_matches($1) JOIN player_tables as A
       ON opposing_player = player_id
       WHERE opposing_player IS NOT NULL;
$$ LANGUAGE SQL;

CREATE OR REPLACE FUNCTION set_omw (integer) RETURNS VOID AS $$
       UPDATE player_recordz SET omw = (select sum(opponent_OMW) FROM player_omw($1))
       WHERE player_id = $1;
$$ LANGUAGE SQL;

CREATE OR REPLACE FUNCTION set_all_OMW() RETURNS VOID AS $$
-- problematic to do this
       select * from set_OMW(1);
       select * from set_OMW(2);
       select * from set_OMW(3);
       select * from set_OMW(4);
       select * from set_OMW(5);
       select * from set_OMW(6);
       select * from set_OMW(7);
       select * from set_OMW(8);
$$ LANGUAGE SQL;


-- CREATE OR REPLACE FUNCTION log__records(round integer, tournament_name text) RETURNS VOID AS $$
--        SELECT log_named_draws($1, $2);
--        -- SELECT log_home_losses($1);
--        -- SELECT log_home_wins($1);
--        -- SELECT log_away_losses($1);
--        -- SELECT log_away_wins($1);
--        -- SELECT log_draws($1);
--        SELECT update_points();
-- $$ LANGUAGE SQL;



-- -- uses a $name$ syntax erroneously?
-- CREATE OR REPLACE FUNCTION log_records(round round_no integer, tournament_name text) RETURNS VOID as $log_records$
--        SELECT log_home_losses($1, $2);
--        SELECT log_home_wins($1, $2);
--        SELECT log_away_losses($1, $2);
--        SELECT log_away_wins($1, $2);
--        SELECT log_draws($1, $2);
--        SELECT update_points();
--        $log_records$ LANGUAGE SQL;

-- uses a $name$ syntax erroneously?
CREATE OR REPLACE FUNCTION log_records(round_no integer, tournament_name text) RETURNS VOID as $$
       SELECT log_home_losses($1, $2);
       SELECT log_home_wins($1, $2);
       SELECT log_away_losses($1, $2);
       SELECT log_away_wins($1, $2);
       SELECT log_draws($1, $2);
       SELECT update_points();
$$ LANGUAGE SQL;


#+END_SRC

#+RESULTS:
| CREATE TABLE    |
|-----------------|
| CREATE TABLE    |
| CREATE TABLE    |
| CREATE TABLE    |
| CREATE TABLE    |
| CREATE VIEW     |
| CREATE VIEW     |
| CREATE FUNCTION |
| CREATE TRIGGER  |
| CREATE FUNCTION |
| CREATE TRIGGER  |
| CREATE FUNCTION |
| CREATE FUNCTION |
| CREATE FUNCTION |
| CREATE FUNCTION |
| CREATE FUNCTION |
| CREATE FUNCTION |
| CREATE FUNCTION |
| CREATE FUNCTION |
| CREATE FUNCTION |
| CREATE FUNCTION |
| CREATE FUNCTION |
*** 'still developing using SQL' dedicated section
**** SQL update statement syntax
#+BEGIN_SRC sql :engine postgresql :database tourney_practice
select * from matchez
#+END_SRC

#+RESULTS:
| match_id | tournament_name | round |
|----------+-----------------+-------|
|          | tennis          |     1 |
|          | tennis          |     1 |
|          | tennis          |     1 |
|          | tennis          |     1 |
|        1 | tennis          |     1 |
|        2 | tennis          |     1 |
|        3 | tennis          |     1 |
|        4 | tennis          |     1 |

#+BEGIN_SRC sql :engine postgresql :database tourney_practice
UPDATE matchez
SET tournament_name = 'tennis', round = 1
WHERE tournament_name = 'none'


#+END_SRC

#+RESULTS:
| UPDATE 4 |
|----------|
**** practice giving extra arguments to function
The following steps serve to spell out the activities for the smallest
tournament

#+BEGIN_SRC sql :engine postgresql :database tourney_practice
-- register a player with a "named"
-- also autoupdates player_recordz via a trigger
INSERT INTO playerz (player_name) VALUES ('a');
INSERT INTO playerz (player_name) VALUES ('b');
#+END_SRC

#+RESULTS:
| INSERT 0 1 |
|------------|

#+BEGIN_SRC sql :engine postgresql :database tourney_practice
-- register a match between two players
-- also autoupdates match_id and tournament_name (with 'none') in matchez via a trigger
INSERT INTO match_participants (home, away) VALUES (1, 2);
#+END_SRC

#+RESULTS:
| INSERT 0 1 |
|------------|

#+BEGIN_SRC sql :engine postgresql :database tourney_practice
-- set the name and the round number of the tournament that
-- that this match belongs to
UPDATE matchez SET tournament_name='tennis', round = 1 WHERE tournament_name= 'none';
#+END_SRC

#+RESULTS:
| UPDATE 0 |
|----------|

#+BEGIN_SRC sql :engine postgresql :database tourney_practice
-- report a result for the given match id
INSERT INTO score_results VALUES (1, 1, 1);
#+END_SRC

#+RESULTS:
| INSERT 0 1 |
|------------|
#+BEGIN_SRC sql :engine postgresql :database tourney_practice
CREATE OR REPLACE FUNCTION log_named_draws(round_no integer, tournament_name text) RETURNS VOID AS $$
       UPDATE player_recordz SET draws = draws + 1
       from tournament_matches as a 
       WHERE a.home_score = a.away_score
       AND (a.home = player_id OR a.away = player_id)
       AND a.round = $1 AND a.tournament_name = $2
$$ LANGUAGE SQL;
#+END_SRC

#+BEGIN_SRC sql :engine postgresql :database tourney_practice
-- ensure that we have a good definition for log_named_draws
-- which should just serve to...test out that we can give a tournament name
-- when trying to record a draw
select * from log_named_draws(1, 'tennis')
#+END_SRC

#+RESULTS:
| log_named_draws |
|-----------------|
|                 |

#+BEGIN_SRC sql :engine postgresql :database tourney_practice
SELECT update_points();
#+END_SRC

#+RESULTS:
| update_points |
|---------------|
|               |
#+BEGIN_SRC sql :engine postgresql :database tourney_practice
CREATE OR REPLACE FUNCTION log_some_records(round integer, tournament_name text) RETURNS VOID AS $$
       SELECT log_named_draws($1, $2);
       -- SELECT log_home_losses($1);
       -- SELECT log_home_wins($1);
       -- SELECT log_away_losses($1);
       -- SELECT log_away_wins($1);
       -- SELECT log_draws($1);
       SELECT update_points();
$$ LANGUAGE SQL;


#+END_SRC

#+RESULTS:
| CREATE FUNCTION |
|-----------------|

#+BEGIN_SRC sql :engine postgresql :database tourney_practice
CREATE OR REPLACE FUNCTION log_some_records(round integer, tournament_name text) RETURNS VOID as $log_some_records$
       SELECT log_named_draws($1, $2);
       -- SELECT log_home_losses($1);
       -- SELECT log_home_wins($1);
       -- SELECT log_away_losses($1);
       -- SELECT log_away_wins($1);
       -- SELECT log_draws($1);
       SELECT update_points();
       $log_some_records$ LANGUAGE SQL;


#+END_SRC

#+RESULTS:
| CREATE FUNCTION |
|-----------------|

**** full code sequence 
#+BEGIN_SRC sql :engine postgresql :database tourney_practice
INSERT INTO playerz (player_name) VALUES ('a');
INSERT INTO playerz (player_name) VALUES ('b');
INSERT INTO match_participants (home, away) VALUES (1, 2);
UPDATE matchez SET tournament_name='tennis', round = 1 WHERE tournament_name= 'none';
INSERT INTO score_results VALUES (1, 1, 1);

-- CREATE OR REPLACE FUNCTION log_named_draws(round_no integer, tournament_name text) RETURNS VOID AS $$
--        UPDATE player_recordz SET draws = draws + 1
--        from tournament_matches as a 
--        WHERE a.home_score = a.away_score
--        AND (a.home = player_id OR a.away = player_id)
--        AND a.round = $1 AND a.tournament_name = $2
-- $$ LANGUAGE SQL;
#+END_SRC

#+RESULTS:
| INSERT 0 1 |
|------------|
| INSERT 0 1 |
| INSERT 0 1 |
| UPDATE 1   |
| INSERT 0 1 |

#+BEGIN_SRC sql :engine postgresql :database tourney_practice
select * from log_named_draws(1, 'tennis')
SELECT update_points();
#+END_SRC

#+BEGIN_SRC sql :engine postgresql :database tourney_practice
-- CREATE OR REPLACE FUNCTION log_some_records(round integer, tournament_name text) RETURNS VOID as $log_some_records$
--        SELECT log_named_draws($1, $2);
--        -- SELECT log_home_losses($1);
--        -- SELECT log_home_wins($1);
--        -- SELECT log_away_losses($1);
--        -- SELECT log_away_wins($1);
--        -- SELECT log_draws($1);
--        SELECT update_points();
--        $log_some_records$ LANGUAGE SQL;
select * FROM log_some_records(1, 'tennis')
#+END_SRC

#+RESULTS:
| log_some_records |
|------------------|
|                  |

#+BEGIN_SRC sql :engine postgresql :database tourney_practice
select * from tournament_matches;
#+END_SRC

#+RESULTS:
| match_id | tournament_name | round | home | away | home_score | away_score |
|----------+-----------------+-------+------+------+------------+------------|

#+BEGIN_SRC sql :engine postgresql :database tourney_practice
select * from player_tables
ORDER BY player_id;
#+END_SRC

#+RESULTS:
| player_id | player_name | wins | losses | draws | points | omw |
|-----------+-------------+------+--------+-------+--------+-----|
|         1 | a           |    3 |      0 |     0 |      9 |  15 |
|         2 | b           |    2 |      1 |     0 |      6 |  12 |
|         3 | c           |    1 |      2 |     0 |      3 |   9 |
|         4 | d           |    2 |      1 |     0 |      6 |  12 |
|         5 | e           |    1 |      2 |     0 |      3 |  18 |
|         6 | f           |    1 |      2 |     0 |      3 |  12 |
|         7 | g           |    0 |      3 |     0 |      0 |  15 |
|         8 | h           |    2 |      1 |     0 |      6 |  15 |
|         9 | allen       |    0 |      0 |     0 |      0 |   0 |
|        10 | beverly     |    0 |      0 |     0 |      0 |   0 |
|        11 | cleanth     |    0 |      0 |     0 |      0 |   0 |
|        12 | devon       |    0 |      0 |     0 |      0 |   0 |
|        13 | eldridge    |    0 |      0 |     0 |      0 |   0 |
|        14 | fatool      |    0 |      0 |     0 |      0 |   0 |
|        15 | g-money     |    0 |      0 |     0 |      0 |   0 |
|        16 | harold      |    0 |      0 |     0 |      0 |   0 |

*** exceeds Python code
#+BEGIN_SRC python :session *Python* :results output :tangle yes
import psycopg2

## db interaction plumbing
def new_connect(dbname):
    dbname_string = "dbname={}".format(dbname)
    return psycopg2.connect(dbname_string)

def new_dbExecuteWrapper(query_string, dbname, extra=None):
    DB = new_connect(dbname)
    c = DB.cursor()
    c.execute(query_string, extra)
    DB.commit()
    DB.close()

def new_dbExecuteRetrievalWrapper_allrows(dbname, query_string):
    DB = new_connect(dbname)
    c = DB.cursor()
    c.execute(query_string)
    rows = c.fetchall()
    DB.close()    
    return rows

## SQL 'dsl' helpers
def update_statement_string(table_name):
    tb_name = table_name
    sql_keywords = """UPDATE """
    update_statement = sql_keywords + tb_name

def keyword_statement_string(table_name, sql_keyword):
    tb_name = table_name
    sql_keywords = sql_keyword + """ """
    update_statement = sql_keywords + tb_name + """ """
    return update_statement

## deletion
def new_deleteTable(dbname, table_name):
    tb_name = table_name
    sql_keywords = """DELETE FROM """
    query = sql_keywords + tb_name
    table_nm = (table_name,)
    new_dbExecuteWrapper(query, dbname)


def deletePlayers():
    new_deleteTable("tourney_practice", "playerz")

def deleteMatches():
    new_deleteTable("tourney_practice", "matchez")

## original Python db interaction
def new_countPlayers(dbname, table_name):
    DB = new_connect(dbname)
    c = DB.cursor()
    from_statement = keyword_statement_string(table_name, """FROM""")
    query = "SELECT count(*)" + from_statement + ";"
    c.execute(query)
    row = c.fetchone()
    row_item = list(row)
    DB.close()
    return int(row_item[0])

# refactor to allow substituting column names?
def new_registerPlayer(dbname, table_name, player_name):
    insert_statement = keyword_statement_string(table_name, """INSERT INTO""")
    query = (insert_statement + "(player_name)" + 
             "VALUES (%s);")
    new_dbExecuteWrapper(query, dbname, (player_name,))

# ### IMPORTANT: which table/view and which columns??
def new_playerStandings(dbname, table_name):
    from_statement = keyword_statement_string(table_name, """FROM""")
    query = ("SELECT player_id, points " +
             from_statement + "ORDER BY points DESC;")
    return new_dbExecuteRetrievalWrapper_allrows(dbname, query)


### IMPORTANT: which table/view and which columns??
#Return a table ordered first by points and then OMW (to break ties?)

def new_playerStandings_alt(dbname, table_name):
    from_statement = keyword_statement_string(table_name, """FROM""")
    query = ("SELECT * " +
             from_statement + "ORDER BY points DESC, omw DESC;")
    return new_dbExecuteRetrievalWrapper_allrows(dbname, query)

def playerTables():
    new_playerStandings_alt("tourney_practice", "player_tables")


# def registerMatch(dbname, table_name, match_no, tournament_name, round_of_tournament):
#     insert_statement = keyword_statement_string(table_name, """INSERT INTO""")
#     query = (insert_statement + "(match_id, tournament_name, round)" + 
#              "VALUES (%s, %s, %s);")
#     new_dbExecuteWrapper(query, dbname, (match_no, tournament_name, round_of_tournament))

def registerMatch(dbname, table_name, tournament_name, round_of_tournament):
    insert_statement = keyword_statement_string(table_name, """INSERT INTO""")
    query = (insert_statement + "(tournament_name, round)" + 
             "VALUES (%s, %s);")
    new_dbExecuteWrapper(query, dbname, (tournament_name, round_of_tournament))


# def registerMatchParticipants(dbname, table_name, match_no, player_id1, player_id2):
#     insert_statement = keyword_statement_string(table_name, """INSERT INTO""")
#     query = (insert_statement + "VALUES (%s, %s, %s);")
#     new_dbExecuteWrapper(query, dbname, (match_no, player_id1, player_id2))

# use update_statement_string(table_name)???
def registerMatchParticipants(dbname, table_name, sport, round_no, player_id1, player_id2):
    participant_insert_statement = keyword_statement_string(table_name, """INSERT INTO""")
    query2 = (participant_insert_statement + "(home, away)" + "VALUES (%s, %s);")
    new_dbExecuteWrapper(query2, dbname, (player_id1, player_id2))
    match_update_statement = keyword_statement_string("""matchez""", """UPDATE""")
    query1 = (match_update_statement + 
              "SET tournament_name= (%s), round = (%s) WHERE tournament_name= 'none';")
    new_dbExecuteWrapper(query1, dbname, (sport, round_no))


def registerScores(dbname, table_name, match_no, home_score, away_score):
    insert_statement = keyword_statement_string(table_name, """INSERT INTO""")
    query = (insert_statement + "VALUES (%s, %s, %s);")
    new_dbExecuteWrapper(query, dbname, (match_no, home_score, away_score))

def log_round_results(dbname, tournament_name, round_of_tournament):
    query = "SELECT * FROM log_records(%s, %s)"
    new_dbExecuteWrapper(query, dbname, (round_of_tournament, tournament_name))

# a brittle way to obtain player ids?
def how_many_players(dbname):
    query = "select * from player_recordz;"
    return new_dbExecuteRetrievalWrapper_allrows(dbname, query)

def set_OMW(dbname, player_id):
    query = "SELECT * FROM set_omw(%s);"
    new_dbExecuteWrapper(query, dbname, (player_id,))

def set_all_OMW(dbname):
    data = how_many_players(dbname)
    playaz = [n[0] for n in data]
    [set_OMW(dbname, n) for n in playaz]
    print("done")

def new_playerStandings_alt(dbname, table_name):
    from_statement = keyword_statement_string(table_name, """FROM""")
    query = ("SELECT * " + from_statement + "ORDER BY points DESC, omw DESC;")
    return new_dbExecuteRetrievalWrapper_allrows(dbname, query)

def naive_pairings():
    pairings = []
    tables = new_playerStandings_alt("tourney_practice", "player_recordz")
    [id1, id2, id3, id4, id5, id6, id7, id8] = [row[0] for row in tables]
    pairings = [(id1, id2), (id3, id4), (id5, id6), (id7, id8)]
    return pairings

def naive_swissPairings(round_no, tournament_name):
    next_round = naive_pairings()
    for pair in next_round:
        registerMatchParticipants("tourney_practice", "match_participants", tournament_name, round_no, pair[0], pair[1])
   
#+END_SRC

#+RESULTS:


