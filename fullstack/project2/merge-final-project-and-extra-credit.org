* drafts of finished functions
* python definitions (except SwissPairings)
** functions don't assume a db or table (but do assume column names)
   :PROPERTIES:
   :ID:       767CBA32-990F-44B0-B1BE-0F51806648F9
   :END:
#+BEGIN_SRC python :session *Python* :results output :tangle yes
import psycopg2

def new_connect(dbname):
    dbname_string = "dbname={}".format(dbname)
    return psycopg2.connect(dbname_string)

def new_dbExecuteWrapper(query_string, dbname, extra=None):
    DB = new_connect(dbname)
    c = DB.cursor()
    c.execute(query_string, extra)
    DB.commit()
    DB.close()

def new_dbExecuteRetrievalWrapper_allrows(dbname, query_string):
    DB = new_connect(dbname)
    c = DB.cursor()
    c.execute(query_string)
    rows = c.fetchall()
    DB.close()    
    return rows

def update_statement_string(table_name):
    tb_name = table_name
    sql_keywords = """UPDATE """
    update_statement = sql_keywords + tb_name

def keyword_statement_string(table_name, sql_keyword):
    tb_name = table_name
    sql_keywords = sql_keyword + """ """
    update_statement = sql_keywords + tb_name + """ """
    return update_statement

def new_deleteTable(dbname, table_name):
    tb_name = table_name
    sql_keywords = """DELETE FROM """
    query = sql_keywords + tb_name
    table_nm = (table_name,)
    new_dbExecuteWrapper(query, dbname)

def new_countPlayers(dbname, table_name):
    DB = new_connect(dbname)
    c = DB.cursor()
    from_statement = keyword_statement_string(table_name, """FROM""")
    query = "SELECT count(*)" + from_statement + ";"
    c.execute(query)
    row = c.fetchone()
    row_item = list(row)
    DB.close()
    return int(row_item[0])

# refactor to allow substituting column names?
def new_registerPlayer(dbname, table_name, player_name):
    insert_statement = keyword_statement_string(table_name, """INSERT INTO""")
    query = (insert_statement + "(player_name)" + 
             "VALUES (%s);")
    new_dbExecuteWrapper(query, dbname, (player_name,))

# refactor to allow substituting column names?
def initialize_player_record(dbname, table_name, player_id):
    insert_statement = keyword_statement_string(table_name, """INSERT INTO""")
    query = (insert_statement + "(player_id)" + 
             "VALUES (%s);")
    new_dbExecuteWrapper(query, dbname, (player_id,))


def new_playerStandings(dbname, table_name):
    from_statement = keyword_statement_string(table_name, """FROM""")
    query = ("SELECT player_id, points " +
             from_statement + "ORDER BY points DESC;")
    return new_dbExecuteRetrievalWrapper_allrows(dbname, query)


def registerMatch(dbname, table_name, match_no, tournament_name, round_of_tournament):
    insert_statement = keyword_statement_string(table_name, """INSERT INTO""")
    query = (insert_statement + "(match_id, tournament_name, round)" + 
             "VALUES (%s, %s, %s);")
    new_dbExecuteWrapper(query, dbname, (match_no, tournament_name, round_of_tournament))


def registerMatchParticipants(dbname, table_name, match_no, player_id1, player_id2):
    insert_statement = keyword_statement_string(table_name, """INSERT INTO""")
    query = (insert_statement + "VALUES (%s, %s, %s);")
    new_dbExecuteWrapper(query, dbname, (match_no, player_id1, player_id2))


def registerScores(dbname, table_name, match_no, home_score, away_score):
    insert_statement = keyword_statement_string(table_name, """INSERT INTO""")
    query = (insert_statement + "VALUES (%s, %s, %s);")
    new_dbExecuteWrapper(query, dbname, (match_no, home_score, away_score))

def log_round_results(dbname, round_of_tournament):
    query = "SELECT * FROM log_records(%s)"
    new_dbExecuteWrapper(query, dbname, (round_of_tournament,))
#+END_SRC

** refactor logging functions
*** log_rounds and set OMWs
#+BEGIN_SRC python :session *Python* :results output :tangle yes
# a brittle way to obtain player ids?
def how_many_players(dbname):
    query = "select * from player_recordz;"
    return new_dbExecuteRetrievalWrapper_allrows(dbname, query)
#+END_SRC

#+BEGIN_SRC python :session *Python* :results output :tangle yes
# should really be called log_rounds?
# extraneous--already defined (and re-named as) log_round_results

# def log_player_records(dbname, round_no):
#     query = "select * from log_records(%s);"
#     return new_dbExecuteWrapper(query, dbname, (round_no,))
#+END_SRC

#+BEGIN_SRC python :session *Python* :results output :tangle yes
def set_OMW(dbname, player_id):
    query = "SELECT * FROM set_omw(%s);"
    new_dbExecuteWrapper(query, dbname, (player_id,))
#+END_SRC

#+BEGIN_SRC python :session *Python* :results output :tangle yes
def set_allll_OMW(dbname):
    data = how_many_players(dbname)
    playaz = [n[0] for n in data]
    [set_OMW(dbname, n) for n in playaz]
    print("done")
#+END_SRC

*** call the logging functions
#+BEGIN_SRC python :session *Python* :results output :tangle yes
set_allll_OMW('tourney_practice')
#+END_SRC

#+BEGIN_SRC python :session *Python* :results output :tangle yes
log_player_record('tourney_practice', 1)
#+END_SRC
* [#A] swissPairings definitions
** walk-through of what the function should
*** swissPairings1 will not work for tournaments with ties
#+BEGIN_SRC python :session *Python* :results output :tangle yes
def swissPairings1(dbname):
    query = ("SELECT a.player_id, b.player_id "
             "FROM player_recordz as a, player_recordz as b "
             "WHERE a.points = b.points "
             "AND a.player_id != b.player_id "
             "AND a.player_id < b.player_id")
    return new_dbExecuteRetrievalWrapper_allrows(dbname, query)

#+END_SRC

#+RESULTS:

#+BEGIN_SRC python :session *Python* :results output :tangle yes
swissPairings1("tourney_practice")
#+END_SRC

#+RESULTS:
: [(1, 2)]


: [(1, 2)]

* examples of running python code to do db interactions
** review "tourney_practice" data
*** report-retrieve data
#+BEGIN_SRC python :session *Python* :results output :tangle yes
new_countPlayers("tourney_practice", "playerz")
#+END_SRC

#+RESULTS:
: 4


: NameError: name 'new_countPlayers' is not defined
: 
: > <ipython-input-21-b41d3fbbff48>(1)<module>()
: ----> 1 new_countPlayers("tourney_practice", "playerz")


: 4

#+BEGIN_SRC python :session *Python* :results output :tangle yes
new_playerStandings("tourney_practice", "player_recordz")
#+END_SRC

#+RESULTS:
: [(3, 3), (1, 1), (2, 1), (4, 0)]

#+BEGIN_SRC python :session *Python* :results output :tangle yes
new_deleteTable("tourney_practice", "playerz")
#+END_SRC
* create example tournaments using only Python functions
  :PROPERTIES:
  :ID:       236D906F-20D1-499B-9E78-BD524C05A5D0
  :END:
** "soccer" tournament (ties)
*** first round data for simple 4 player tournament--ties allowed
#+BEGIN_SRC python :session *Python* :results output :tangle yes
new_registerPlayer("tourney_practice", "playerz", 'aaaa');
new_registerPlayer("tourney_practice", "playerz", 'bbbb');
new_registerPlayer("tourney_practice", "playerz", 'cccc');
new_registerPlayer("tourney_practice", "playerz", 'dddd');

initialize_player_record("tourney_practice", "player_recordz", 1)
initialize_player_record("tourney_practice", "player_recordz", 2)
initialize_player_record("tourney_practice", "player_recordz", 3)
initialize_player_record("tourney_practice", "player_recordz", 4)

registerMatch("tourney_practice", "matchez", 1, "soccer", 1);
registerMatch("tourney_practice", "matchez", 2, "soccer", 1);

registerMatchParticipants("tourney_practice", "match_participants", 1, 1, 2)
registerMatchParticipants("tourney_practice", "match_participants", 2, 3, 4)

registerScores("tourney_practice", "score_results", 1, 10, 10)
registerScores("tourney_practice", "score_results", 2, 11, 9)

log_player_simple("tourney_practice", 1)

# uh, where is this defined??
log_all_omw("tourney_practice")
#+END_SRC
** "tennis" tournament (no ties)
*** two rounds data for simple 8 player tournament--ties allowed (identical?)
#+BEGIN_SRC python :session *Python* :results output :tangle yes
new_registerPlayer("tourney_practice", "playerz", 'a');
new_registerPlayer("tourney_practice", "playerz", 'b');
new_registerPlayer("tourney_practice", "playerz", 'c');
new_registerPlayer("tourney_practice", "playerz", 'd');
new_registerPlayer("tourney_practice", "playerz", 'e');
new_registerPlayer("tourney_practice", "playerz", 'f');
new_registerPlayer("tourney_practice", "playerz", 'g');
new_registerPlayer("tourney_practice", "playerz", 'h');

initialize_player_record("tourney_practice", "player_recordz", 1)
initialize_player_record("tourney_practice", "player_recordz", 2)
initialize_player_record("tourney_practice", "player_recordz", 3)
initialize_player_record("tourney_practice", "player_recordz", 4)
initialize_player_record("tourney_practice", "player_recordz", 5)
initialize_player_record("tourney_practice", "player_recordz", 6)
initialize_player_record("tourney_practice", "player_recordz", 7)
initialize_player_record("tourney_practice", "player_recordz", 8)

registerMatch("tourney_practice", "matchez", 1, "tennis", 1);
registerMatch("tourney_practice", "matchez", 2, "tennis", 1);
registerMatch("tourney_practice", "matchez", 3, "tennis", 1);
registerMatch("tourney_practice", "matchez", 4, "tennis", 1);
registerMatch("tourney_practice", "matchez", 5, "tennis", 2);
registerMatch("tourney_practice", "matchez", 6, "tennis", 2);
registerMatch("tourney_practice", "matchez", 7, "tennis", 2);
registerMatch("tourney_practice", "matchez", 8, "tennis", 2);

registerMatchParticipants("tourney_practice", "match_participants", 1, 1, 2)
registerMatchParticipants("tourney_practice", "match_participants", 2, 3, 4)
registerMatchParticipants("tourney_practice", "match_participants", 3, 5, 6)
registerMatchParticipants("tourney_practice", "match_participants", 4, 7, 8)
registerMatchParticipants("tourney_practice", "match_participants", 5, 1, 3)
registerMatchParticipants("tourney_practice", "match_participants", 6, 2, 4)
registerMatchParticipants("tourney_practice", "match_participants", 7, 5, 7)
registerMatchParticipants("tourney_practice", "match_participants", 8, 6, 8)

registerScores("tourney_practice", "score_results", 1, 1, 10)
registerScores("tourney_practice", "score_results", 2, 11, 9)
registerScores("tourney_practice", "score_results", 3, 2, 1)
registerScores("tourney_practice", "score_results", 4, 1, 9)
registerScores("tourney_practice", "score_results", 5, 1, 0)
registerScores("tourney_practice", "score_results", 6, 11, 1)
registerScores("tourney_practice", "score_results", 7, 12, 10)
registerScores("tourney_practice", "score_results", 8, 0, 9)

log_round_results("tourney_practice", 1)
log_round_results("tourney_practice", 2)

#log_all_omw("tourney_practice")
#+END_SRC

#+RESULTS:

#+BEGIN_SRC python :session *Python* :results output :tangle yes
# log_player_record('tourney_practice', 1)

set_allll_OMW('tourney_practice')
#+END_SRC

#+RESULTS:
: 
: >>> done


*** two rounds for 8 player tournament with ties; each round results determine next round matches

**** setup and first round
#+BEGIN_SRC python :session *Python* :results output :tangle yes
new_registerPlayer("tourney_practice", "playerz", 'a');
new_registerPlayer("tourney_practice", "playerz", 'b');
new_registerPlayer("tourney_practice", "playerz", 'c');
new_registerPlayer("tourney_practice", "playerz", 'd');
new_registerPlayer("tourney_practice", "playerz", 'e');
new_registerPlayer("tourney_practice", "playerz", 'f');
new_registerPlayer("tourney_practice", "playerz", 'g');
new_registerPlayer("tourney_practice", "playerz", 'h');

initialize_player_record("tourney_practice", "player_recordz", 1)
initialize_player_record("tourney_practice", "player_recordz", 2)
initialize_player_record("tourney_practice", "player_recordz", 3)
initialize_player_record("tourney_practice", "player_recordz", 4)
initialize_player_record("tourney_practice", "player_recordz", 5)
initialize_player_record("tourney_practice", "player_recordz", 6)
initialize_player_record("tourney_practice", "player_recordz", 7)
initialize_player_record("tourney_practice", "player_recordz", 8)

registerMatch("tourney_practice", "matchez", 1, "tennis", 1);
registerMatch("tourney_practice", "matchez", 2, "tennis", 1);
registerMatch("tourney_practice", "matchez", 3, "tennis", 1);
registerMatch("tourney_practice", "matchez", 4, "tennis", 1);
registerMatch("tourney_practice", "matchez", 5, "tennis", 2);
registerMatch("tourney_practice", "matchez", 6, "tennis", 2);
registerMatch("tourney_practice", "matchez", 7, "tennis", 2);
registerMatch("tourney_practice", "matchez", 8, "tennis", 2);

registerMatchParticipants("tourney_practice", "match_participants", 1, 1, 2)
registerMatchParticipants("tourney_practice", "match_participants", 2, 3, 4)
registerMatchParticipants("tourney_practice", "match_participants", 3, 5, 6)
registerMatchParticipants("tourney_practice", "match_participants", 4, 7, 8)

registerScores("tourney_practice", "score_results", 1, 1, 10)
registerScores("tourney_practice", "score_results", 2, 11, 9)
registerScores("tourney_practice", "score_results", 3, 2, 1)
registerScores("tourney_practice", "score_results", 4, 1, 9)

log_round_results("tourney_practice", 1)

set_allll_OMW('tourney_practice')
#+END_SRC

**** how do you get second round to be setup and then run?
* SQL steps
  :LOGBOOK:
  CLOCK: [2016-04-04 Mon 15:33]--[2016-04-06 Wed 17:50] => 50:17
  :END:
** single monolithic blocks
*** all setups
**** all 'tourney_practice' database CREATE definitions--schema
defines a problematic set_all_OMW
#+BEGIN_SRC sql :engine postgresql :database tourney_practice
-- only used for restarting with clean player ids
DROP TABLE playerz CASCADE; DROP TABLE matchez CASCADE; DROP TABLE match_participants; DROP TABLE score_results; DROP TABLE player_recordz;

-- matches have id number, a tournament name and a round number
CREATE TABLE matchez(
       match_id serial PRIMARY KEY,
       tournament_name text not null,
       round int); 

-- players have an id number and a name; 
-- theoretically can be in any tournaments? 
-- (need to distinguish btwn different results in different tournaments)
CREATE TABLE playerz (
       player_id serial PRIMARY KEY,
       player_name text not null);

-- matches have participants, arbitrarily assigned to home and away categories
CREATE TABLE match_participants(
       match_id int REFERENCES matchez (match_id),
       home int REFERENCES playerz (player_id),
       away int REFERENCES playerz (player_id));

-- results of matches have a score for the home and away players
CREATE TABLE score_results (
       match_id int REFERENCES matchez (match_id),
       home_score int,
       away_score int);

-- players have an amount of wins, losses and draws,
-- in cases where draws are possible, players also have points taking
-- this possibility into account.
-- finally, all players have an OMW score, which is the sum of the points
-- of those players they have faced
CREATE TABLE player_recordz (
       player_id int REFERENCES playerz (player_id),
       wins int DEFAULT 0,
       losses int DEFAULT 0,
       draws int DEFAULT 0,
       points int DEFAULT 0,
       OMW int DEFAULT 0);

-- a complete view of all tournaments shows any matches registered, 
-- as well as the scores in those matches
CREATE VIEW tournament_matches AS
select a.match_id, a.tournament_name, a.round, b.home, b.away, c.home_score, c.away_score
from matchez as a, match_participants as b, score_results as c
where a.match_id = b.match_id
AND b.match_id = c.match_id;

-- a complete view of a player shows the id/name as well as the various 
-- statistics already contained in player_recordz

CREATE VIEW player_tables AS
select a.player_id, a.player_name, b.wins, b.losses, b.draws, b.points, b.OMW
from playerz as a, player_recordz as b
where a.player_id = b.player_id;


-- to be able to reflect the results of matches in player stats, 
-- we need to distinguish the various kinds of wins, losses 
-- (and any draws if the tournament allows them)

-- the following update functions need to be called in the proper way 
-- and at the proper time (i.e. at the end of rounds of a particular tournament)
-- right now, there is the possibility of over-tabulating points if all matches 
-- for any particular rounds have not been registered yet
CREATE OR REPLACE FUNCTION log_draws(integer) RETURNS VOID AS $$
       UPDATE player_recordz SET draws = draws + 1
       from tournament_matches as a 
       WHERE a.home_score = a.away_score
       AND (a.home = player_id OR a.away = player_id)
       AND a.round = $1;
$$ LANGUAGE SQL;

CREATE OR REPLACE FUNCTION log_away_wins(integer) RETURNS VOID AS $$
       UPDATE player_recordz SET wins = wins + 1
       from tournament_matches as a 
       WHERE a.home_score < a.away_score
       AND a.away = player_id
       AND a.round = $1;
$$ LANGUAGE SQL;

CREATE OR REPLACE FUNCTION log_away_losses(integer) RETURNS VOID AS $$
       UPDATE player_recordz SET losses = losses + 1
       from tournament_matches as a 
       WHERE a.home_score > a.away_score
       AND a.away = player_id
       AND a.round = $1;
$$ LANGUAGE SQL;

CREATE OR REPLACE FUNCTION log_home_wins(integer) RETURNS VOID AS $$
       UPDATE player_recordz SET wins = wins + 1
       from tournament_matches as a 
       WHERE a.home_score > a.away_score
       AND a.home = player_id
       AND a.round = $1;
$$ LANGUAGE SQL;

CREATE OR REPLACE FUNCTION log_home_losses(integer) RETURNS VOID AS $$
       UPDATE player_recordz SET losses = losses + 1
       from tournament_matches as a 
       WHERE a.home_score < a.away_score
       AND a.home = player_id
       AND a.round = $1;
$$ LANGUAGE SQL;

-- at the end of each round we want to tabulate the number of points for all participants
CREATE OR REPLACE FUNCTION update_points() RETURNS VOID AS $$
       UPDATE player_recordz 
       SET points = (wins * 3) + draws;
$$ LANGUAGE SQL;


-- we want to create tables collating all the opponents a given player has faced
CREATE OR REPLACE FUNCTION players_matches (integer) RETURNS TABLE (opposing_player int) AS $$
       select 
       	      CASE WHEN a.away = $1 THEN a.home
	      	   WHEN a.home = $1 THEN a.away
		   ELSE NULL
		END as opposing_player
FROM match_participants as a;
$$ LANGUAGE SQL;

CREATE OR REPLACE FUNCTION player_OMW (integer) RETURNS TABLE (opponent int, opponent_OMW int) AS $$
       select opposing_player, a.points FROM players_matches($1) JOIN player_tables as A
       ON opposing_player = player_id
       WHERE opposing_player IS NOT NULL;
$$ LANGUAGE SQL;

CREATE OR REPLACE FUNCTION set_omw (integer) RETURNS VOID AS $$
       UPDATE player_recordz SET omw = (select sum(opponent_OMW) FROM player_omw($1))
       WHERE player_id = $1;
$$ LANGUAGE SQL;

CREATE OR REPLACE FUNCTION set_all_OMW() RETURNS VOID AS $$
-- problematic to do this
       select * from set_OMW(1);
       select * from set_OMW(2);
       select * from set_OMW(3);
       select * from set_OMW(4);
       select * from set_OMW(5);
       select * from set_OMW(6);
       select * from set_OMW(7);
       select * from set_OMW(8);
$$ LANGUAGE SQL;


-- uses a $name$ syntax erroneously?
CREATE OR REPLACE FUNCTION log_records(round integer) RETURNS VOID as $log_records$
       SELECT log_home_losses($1);
       SELECT log_home_wins($1);
       SELECT log_away_losses($1);
       SELECT log_away_wins($1);
       SELECT log_draws($1);
       SELECT update_points();
       $log_records$ LANGUAGE SQL;

#+END_SRC

#+RESULTS:
| DROP TABLE      |
|-----------------|
| DROP TABLE      |
| DROP TABLE      |
| DROP TABLE      |
| DROP TABLE      |
| CREATE TABLE    |
| CREATE TABLE    |
| CREATE TABLE    |
| CREATE TABLE    |
| CREATE TABLE    |
| CREATE VIEW     |
| CREATE VIEW     |
| CREATE FUNCTION |
| CREATE FUNCTION |
| CREATE FUNCTION |
| CREATE FUNCTION |
| CREATE FUNCTION |
| CREATE FUNCTION |
| CREATE FUNCTION |
| CREATE FUNCTION |
| CREATE FUNCTION |
| CREATE FUNCTION |
| CREATE FUNCTION |

**** sample uses of SQL with tourney_practice
***** insert and update functions--deprecate and prefer Python
#+BEGIN_SRC sql :engine postgresql :database tourney_practice

INSERT INTO matchez (match_id, tournament_name, round) VALUES (1, 'tennis', 1);
INSERT INTO matchez (match_id, tournament_name, round) VALUES (2, 'tennis', 1);
INSERT INTO matchez (match_id, tournament_name, round) VALUES (3, 'tennis', 1);
INSERT INTO matchez (match_id, tournament_name, round) VALUES (4, 'tennis', 1);
INSERT INTO matchez (match_id, tournament_name, round) VALUES (5, 'tennis', 2);
INSERT INTO matchez (match_id, tournament_name, round) VALUES (6, 'tennis', 2);
INSERT INTO matchez (match_id, tournament_name, round) VALUES (7, 'tennis', 2);
INSERT INTO matchez (match_id, tournament_name, round) VALUES (8, 'tennis', 2);

-- should inserting a player name into playerz trigger a player_id insert into player_recordz?

INSERT INTO playerz (player_name) VALUES ('a');
INSERT INTO playerz (player_name) VALUES ('b');
INSERT INTO playerz (player_name) VALUES ('c');
INSERT INTO playerz (player_name) VALUES ('d');
INSERT INTO playerz (player_name) VALUES ('e');
INSERT INTO playerz (player_name) VALUES ('f');
INSERT INTO playerz (player_name) VALUES ('g');
INSERT INTO playerz (player_name) VALUES ('h');

INSERT INTO player_recordz (player_id) VALUES (1);
-- INSERT INTO player_recordz (player_id) VALUES IN [1, 2];
INSERT INTO player_recordz (player_id) VALUES (2);
INSERT INTO player_recordz (player_id) VALUES (3);
INSERT INTO player_recordz (player_id) VALUES (4);
INSERT INTO player_recordz (player_id) VALUES (5);
INSERT INTO player_recordz (player_id) VALUES (6);
INSERT INTO player_recordz (player_id) VALUES (7);
INSERT INTO player_recordz (player_id) VALUES (8);
#+END_SRC

#+RESULTS:
| INSERT 0 1 |
|------------|
| INSERT 0 1 |
| INSERT 0 1 |
| INSERT 0 1 |
| INSERT 0 1 |
| INSERT 0 1 |
| INSERT 0 1 |
| INSERT 0 1 |
| INSERT 0 1 |
| INSERT 0 1 |
| INSERT 0 1 |
| INSERT 0 1 |
| INSERT 0 1 |
| INSERT 0 1 |
| INSERT 0 1 |
| INSERT 0 1 |
| INSERT 0 1 |
| INSERT 0 1 |
| INSERT 0 1 |
| INSERT 0 1 |
| INSERT 0 1 |
| INSERT 0 1 |
| INSERT 0 1 |
| INSERT 0 1 |

***** insert tournament rounds data (but don't log results!)
#+BEGIN_SRC sql :engine postgresql :database tourney_practice
INSERT INTO match_participants VALUES (1, 1, 2);
INSERT INTO match_participants VALUES (2, 3, 4);
INSERT INTO match_participants VALUES (3, 5, 6);
INSERT INTO match_participants VALUES (4, 7, 8);
-- uses problematic set_all_OMW
INSERT INTO score_results VALUES (1, 0, 1);
INSERT INTO score_results VALUES (2, 1, 0);
INSERT INTO score_results VALUES (3, 0, 1);
INSERT INTO score_results VALUES (4, 1, 0);
-- SELECT * FROM log_records(1);

-- this won't do anything without record logging
-- SELECT * FROM set_all_OMW();
#+END_SRC

#+RESULTS:
| INSERT 0 1 |
|------------|
| INSERT 0 1 |
| INSERT 0 1 |
| INSERT 0 1 |
| INSERT 0 1 |
| INSERT 0 1 |
| INSERT 0 1 |
| INSERT 0 1 |

#+BEGIN_SRC sql :engine postgresql :database tourney_practice
INSERT INTO match_participants VALUES (5, 2, 3);
INSERT INTO match_participants VALUES (6, 6, 7);
INSERT INTO match_participants VALUES (7, 1, 4);
INSERT INTO match_participants VALUES (8, 5, 8);

INSERT INTO score_results VALUES (5, 0, 10);
INSERT INTO score_results VALUES (6, 10, 0);
INSERT INTO score_results VALUES (7, 0, 10);
INSERT INTO score_results VALUES (8, 1, 10);
-- select * from log_records(2);
-- select * from set_all_omw();
#+END_SRC

#+RESULTS:
| INSERT 0 1 |
|------------|
| INSERT 0 1 |
| INSERT 0 1 |
| INSERT 0 1 |
| INSERT 0 1 |
| INSERT 0 1 |
| INSERT 0 1 |
| INSERT 0 1 |
**** 'TOURNAMENT' (as opposed to 'tourney_practice')
#+BEGIN_SRC sql :engine postgresql :database tournament
-- CREATE DATABASE tournament;
-- \c tournament

CREATE TABLE players(id serial PRIMARY KEY, player_name text not null, wins integer, matches integer);

CREATE TABLE matches(winner integer, loser integer);

#+END_SRC
** tourney setup broken up by statement
*** all 'tourney_practice' database CREATE definitions
**** drop
#+BEGIN_SRC sql :engine postgresql :database tourney_practice
-- only used for restarting with clean player ids
DROP TABLE playerz CASCADE; DROP TABLE matchez CASCADE; DROP TABLE match_participants; DROP TABLE score_results; DROP TABLE player_recordz;
#+END_SRC

#+RESULTS:
| DROP TABLE |
|------------|
| DROP TABLE |
| DROP TABLE |
| DROP TABLE |
| DROP TABLE |
**** create 5 tables and views
#+BEGIN_SRC sql :engine postgresql :database tourney_practice
-- matches have id number, a tournament name and a 'round' number
CREATE TABLE matchez(
       match_id serial PRIMARY KEY,
       tournament_name text not null,
       round int); 

-- players have an id number and a name; 
-- theoretically can be in any tournaments? 
-- (need to distinguish btwn different results in different tournaments)
CREATE TABLE playerz (
       player_id serial PRIMARY KEY,
       player_name text not null);

-- matches have participants, arbitrarily assigned to home and away categories
CREATE TABLE match_participants(
       match_id int REFERENCES matchez (match_id),
       home int REFERENCES playerz (player_id),
       away int REFERENCES playerz (player_id));

-- results of matches have a score for the home and away players
CREATE TABLE score_results (
       match_id int REFERENCES matchez (match_id),
       home_score int,
       away_score int);

-- players have an amount of wins, losses and draws,
-- in cases where draws are possible, players also have points 
-- which take this possibility into account.
-- finally, all players have an OMW score, 
-- which is the sum of the points of those players they have faced
CREATE TABLE player_recordz (
       player_id int REFERENCES playerz (player_id),
       wins int DEFAULT 0,
       losses int DEFAULT 0,
       draws int DEFAULT 0,
       points int DEFAULT 0,
       OMW int DEFAULT 0);

-- a complete view of all TOURNAMENTS shows any matches registered, 
-- as well as the scores in those matches
CREATE VIEW tournament_matches AS
select a.match_id, a.tournament_name, a.round, b.home, b.away, c.home_score, c.away_score
from matchez as a, match_participants as b, score_results as c
where a.match_id = b.match_id
AND b.match_id = c.match_id;

-- a complete view of a PLAYER shows the id/name as well as the various
-- statistics we take into account
CREATE VIEW player_tables AS
select a.player_id, a.player_name, b.wins, b.losses, b.draws, b.points, b.OMW
from playerz as a, player_recordz as b
where a.player_id = b.player_id;

#+END_SRC

#+RESULTS:
| CREATE TABLE |
|--------------|
| CREATE TABLE |
| CREATE TABLE |
| CREATE TABLE |
| CREATE TABLE |
| CREATE VIEW  |
| CREATE VIEW  |
**** create functions
#+BEGIN_SRC sql :engine postgresql :database tourney_practice
-- to be able to reflect the results of matches in player stats, 
-- we need to distinguish the various kinds of wins, losses 
-- (and any draws if the tournament allows them)

-- the following update functions need to be called in the proper way 
-- and at the proper time (i.e. at the end of rounds of a particular tournament)
-- right now, there is the possibility of over-tabulating points if all matches 
-- for any particular rounds have not been registered yet; that is, 
-- if the function is called prematurely
CREATE OR REPLACE FUNCTION log_draws(integer) RETURNS VOID AS $$
       UPDATE player_recordz SET draws = draws + 1
       from tournament_matches as a 
       WHERE a.home_score = a.away_score
       AND (a.home = player_id OR a.away = player_id)
       AND a.round = $1;
$$ LANGUAGE SQL;

CREATE OR REPLACE FUNCTION log_away_wins(integer) RETURNS VOID AS $$
       UPDATE player_recordz SET wins = wins + 1
       from tournament_matches as a 
       WHERE a.home_score < a.away_score
       AND a.away = player_id
       AND a.round = $1;
$$ LANGUAGE SQL;

CREATE OR REPLACE FUNCTION log_away_losses(integer) RETURNS VOID AS $$
       UPDATE player_recordz SET losses = losses + 1
       from tournament_matches as a 
       WHERE a.home_score > a.away_score
       AND a.away = player_id
       AND a.round = $1;
$$ LANGUAGE SQL;

CREATE OR REPLACE FUNCTION log_home_wins(integer) RETURNS VOID AS $$
       UPDATE player_recordz SET wins = wins + 1
       from tournament_matches as a 
       WHERE a.home_score > a.away_score
       AND a.home = player_id
       AND a.round = $1;
$$ LANGUAGE SQL;

CREATE OR REPLACE FUNCTION log_home_losses(integer) RETURNS VOID AS $$
       UPDATE player_recordz SET losses = losses + 1
       from tournament_matches as a 
       WHERE a.home_score < a.away_score
       AND a.home = player_id
       AND a.round = $1;
$$ LANGUAGE SQL;

-- at the end of each round we want to tabulate the number of points for all participants
CREATE OR REPLACE FUNCTION update_points() RETURNS VOID AS $$
       UPDATE player_recordz 
       SET points = (wins * 3) + draws;
$$ LANGUAGE SQL;

#+END_SRC

#+RESULTS:
| CREATE FUNCTION |
|-----------------|
| CREATE FUNCTION |
| CREATE FUNCTION |
| CREATE FUNCTION |
| CREATE FUNCTION |
| CREATE FUNCTION |

#+BEGIN_SRC sql :engine postgresql :database tourney_practice
-- we want to create tables collating all the opponents a given player has faced
CREATE OR REPLACE FUNCTION players_matches (integer) RETURNS TABLE (opposing_player int) AS $$
       select 
       	      CASE WHEN a.away = $1 THEN a.home
	      	   WHEN a.home = $1 THEN a.away
		   ELSE NULL
		END as opposing_player
FROM match_participants as a;
$$ LANGUAGE SQL;

CREATE OR REPLACE FUNCTION player_OMW (integer) RETURNS TABLE (opponent int, opponent_OMW int) AS $$
       select opposing_player, a.points FROM players_matches($1) JOIN player_tables as A
       ON opposing_player = player_id
       WHERE opposing_player IS NOT NULL;
$$ LANGUAGE SQL;

CREATE OR REPLACE FUNCTION set_omw (integer) RETURNS VOID AS $$
       UPDATE player_recordz SET omw = (select sum(opponent_OMW) FROM player_omw($1))
       WHERE player_id = $1;
$$ LANGUAGE SQL;

-- set_all_OMW hardcodes the number of players
-- this should be replaced by a Python function
CREATE OR REPLACE FUNCTION set_all_OMW() RETURNS VOID AS $$
       select * from set_OMW(1);
       select * from set_OMW(2);
       select * from set_OMW(3);
       select * from set_OMW(4);
       select * from set_OMW(5);
       select * from set_OMW(6);
       select * from set_OMW(7);
       select * from set_OMW(8);
$$ LANGUAGE SQL;


-- uses a $name$ syntax erroneously?
CREATE OR REPLACE FUNCTION log_records(round integer) RETURNS VOID as $log_records$
       SELECT log_home_losses($1);
       SELECT log_home_wins($1);
       SELECT log_away_losses($1);
       SELECT log_away_wins($1);
       SELECT log_draws($1);
       SELECT update_points();
       $log_records$ LANGUAGE SQL;

#+END_SRC

#+RESULTS:
| CREATE FUNCTION |
|-----------------|
| CREATE FUNCTION |
| CREATE FUNCTION |
| CREATE FUNCTION |
| CREATE FUNCTION |

*** tourney insert broken up by statement
**** insert matches for a "tennis" tournament
#+BEGIN_SRC sql :engine postgresql :database tourney_practice

INSERT INTO matchez (match_id, tournament_name, round) VALUES (1, 'tennis', 1);
INSERT INTO matchez (match_id, tournament_name, round) VALUES (2, 'tennis', 1);
INSERT INTO matchez (match_id, tournament_name, round) VALUES (3, 'tennis', 1);
INSERT INTO matchez (match_id, tournament_name, round) VALUES (4, 'tennis', 1);
INSERT INTO matchez (match_id, tournament_name, round) VALUES (5, 'tennis', 2);
INSERT INTO matchez (match_id, tournament_name, round) VALUES (6, 'tennis', 2);
INSERT INTO matchez (match_id, tournament_name, round) VALUES (7, 'tennis', 2);
INSERT INTO matchez (match_id, tournament_name, round) VALUES (8, 'tennis', 2);

-- should inserting a player name into playerz trigger a player_id insert into player_recordz?
#+END_SRC

#+RESULTS:
| INSERT 0 1 |
|------------|
| INSERT 0 1 |
| INSERT 0 1 |
| INSERT 0 1 |
| INSERT 0 1 |
| INSERT 0 1 |
| INSERT 0 1 |
| INSERT 0 1 |

**** insert player names for any tournament (single character names like 'a')
#+BEGIN_SRC sql :engine postgresql :database tourney_practice
INSERT INTO playerz (player_name) VALUES ('a');
INSERT INTO playerz (player_name) VALUES ('b');
INSERT INTO playerz (player_name) VALUES ('c');
INSERT INTO playerz (player_name) VALUES ('d');
INSERT INTO playerz (player_name) VALUES ('e');
INSERT INTO playerz (player_name) VALUES ('f');
INSERT INTO playerz (player_name) VALUES ('g');
INSERT INTO playerz (player_name) VALUES ('h');

#+END_SRC

#+RESULTS:
| INSERT 0 1 |
|------------|
| INSERT 0 1 |
| INSERT 0 1 |
| INSERT 0 1 |
| INSERT 0 1 |
| INSERT 0 1 |
| INSERT 0 1 |
| INSERT 0 1 |

**** insert 'player id' numbering in the 'records' table to prepare for later insertions
how can this functionality be recreated and refactored in Python?
     :PROPERTIES:
     :ID:       1059C480-16E9-4571-B8BF-4D96B01B95BC
     :END:
#+BEGIN_SRC sql :engine postgresql :database tourney_practice
INSERT INTO player_recordz (player_id) VALUES (1);
-- INSERT INTO player_recordz (player_id) VALUES IN [1, 2];
INSERT INTO player_recordz (player_id) VALUES (2);
INSERT INTO player_recordz (player_id) VALUES (3);
INSERT INTO player_recordz (player_id) VALUES (4);
INSERT INTO player_recordz (player_id) VALUES (5);
INSERT INTO player_recordz (player_id) VALUES (6);
INSERT INTO player_recordz (player_id) VALUES (7);
INSERT INTO player_recordz (player_id) VALUES (8);
#+END_SRC

#+RESULTS:
| INSERT 0 1 |
|------------|
| INSERT 0 1 |
| INSERT 0 1 |
| INSERT 0 1 |
| INSERT 0 1 |
| INSERT 0 1 |
| INSERT 0 1 |
| INSERT 0 1 |

** make up some actual games (insert tournament rounds data broken up by category)
*** create a schedule of matches
**** insert match participants (match id, home.id, away.id)
#+BEGIN_SRC sql :engine postgresql :database tourney_practice
INSERT INTO match_participants VALUES (1, 1, 2);
INSERT INTO match_participants VALUES (2, 3, 4);
INSERT INTO match_participants VALUES (3, 5, 6);
INSERT INTO match_participants VALUES (4, 7, 8);
#+END_SRC

#+RESULTS:
| INSERT 0 1 |
|------------|
| INSERT 0 1 |
| INSERT 0 1 |
| INSERT 0 1 |

*** create a series of match scores
**** insert score results (match id, home.score, away.score)
#+BEGIN_SRC sql :engine postgresql :database tourney_practice
INSERT INTO score_results VALUES (1, 0, 1);
INSERT INTO score_results VALUES (2, 1, 0);
INSERT INTO score_results VALUES (3, 0, 1);
INSERT INTO score_results VALUES (4, 1, 0);
#+END_SRC

#+RESULTS:
| INSERT 0 1 |
|------------|
| INSERT 0 1 |
| INSERT 0 1 |
| INSERT 0 1 |
*** repeat for round 2
**** schedule of matches
#+BEGIN_SRC sql :engine postgresql :database tourney_practice
INSERT INTO match_participants VALUES (5, 2, 3);
INSERT INTO match_participants VALUES (6, 6, 7);
INSERT INTO match_participants VALUES (7, 1, 4);
INSERT INTO match_participants VALUES (8, 5, 8);
#+END_SRC

#+RESULTS:
| INSERT 0 1 |
|------------|
| INSERT 0 1 |
| INSERT 0 1 |
| INSERT 0 1 |
**** score results
#+BEGIN_SRC sql :engine postgresql :database tourney_practice
INSERT INTO score_results VALUES (5, 0, 10);
INSERT INTO score_results VALUES (6, 10, 0);
INSERT INTO score_results VALUES (7, 0, 10);
INSERT INTO score_results VALUES (8, 1, 10);
#+END_SRC

#+RESULTS:
| INSERT 0 1 |
|------------|
| INSERT 0 1 |
| INSERT 0 1 |
| INSERT 0 1 |

**** log player data
#+BEGIN_SRC sql :engine postgresql :database tourney_practice
select * from log_records(2);
select * from set_all_omw();
#+END_SRC

#+RESULTS:
| INSERT 0 1  |
|-------------|
| INSERT 0 1  |
| INSERT 0 1  |
| INSERT 0 1  |
| log_records |
|             |
| set_all_omw |
|             |

* display contents of tables and views
** plain tables--(matchez, playerz, match_participants, score_results, player_recordz)
Can a player ever be in more than one tournament at time?
If so, then how would you compute his record
#+BEGIN_SRC sql :engine postgresql :database tourney_practice
select * from matchez;
select * from playerz;
select * from match_participants;
select * from score_results;
select * from player_recordz;
#+END_SRC

#+RESULTS:
|  match_id | tournament_name |      round |       |        |     |
|-----------+-----------------+------------+-------+--------+-----|
|         1 | tennis          |          1 |       |        |     |
|         2 | tennis          |          1 |       |        |     |
|         3 | tennis          |          1 |       |        |     |
|         4 | tennis          |          1 |       |        |     |
|         5 | tennis          |          2 |       |        |     |
|         6 | tennis          |          2 |       |        |     |
|         7 | tennis          |          2 |       |        |     |
|         8 | tennis          |          2 |       |        |     |
| player_id | player_name     |            |       |        |     |
|         1 | a               |            |       |        |     |
|         2 | b               |            |       |        |     |
|         3 | c               |            |       |        |     |
|         4 | d               |            |       |        |     |
|         5 | e               |            |       |        |     |
|         6 | f               |            |       |        |     |
|         7 | g               |            |       |        |     |
|         8 | h               |            |       |        |     |
|  match_id | home            |       away |       |        |     |
|         1 | 1               |          2 |       |        |     |
|         2 | 3               |          4 |       |        |     |
|         3 | 5               |          6 |       |        |     |
|         4 | 7               |          8 |       |        |     |
|  match_id | home_score      | away_score |       |        |     |
|         1 | 0               |          1 |       |        |     |
|         2 | 1               |          0 |       |        |     |
|         3 | 0               |          1 |       |        |     |
|         4 | 1               |          0 |       |        |     |
| player_id | wins            |     losses | draws | points | omw |
|         5 | 0               |          1 |     0 |      0 |   3 |
|         3 | 1               |          0 |     0 |      3 |   0 |
|         7 | 1               |          0 |     0 |      3 |   0 |
|         8 | 0               |          1 |     0 |      0 |   3 |
|         4 | 0               |          1 |     0 |      0 |   3 |
|         6 | 1               |          0 |     0 |      3 |   0 |
|         2 | 1               |          0 |     0 |      3 |   0 |
|         1 | 0               |          1 |     0 |      0 |   3 |
** hide previousexample
|-----------+-----------------+------------+-------+--------+-----|
| match_id  | tournament_name | round      |       |        |     |
|-----------+-----------------+------------+-------+--------+-----|
| player_id | player_name     |            |       |        |     |
|           |                 |            |       |        |     |
|-----------+-----------------+------------+-------+--------+-----|
| match_id  | home            | away       |       |        |     |
|-----------+-----------------+------------+-------+--------+-----|
| match_id  | home_score      | away_score |       |        |     |
|-----------+-----------------+------------+-------+--------+-----|
| player_id | wins            | losses     | draws | points | omw |
|-----------+-----------------+------------+-------+--------+-----|


|  match_id | tournament_name |      round |       |        |     |
|-----------+-----------------+------------+-------+--------+-----|
|         1 |          tennis |          1 |       |        |     |
|         2 |          tennis |          1 |       |        |     |
|         3 |          tennis |          1 |       |        |     |
|         4 |          tennis |          1 |       |        |     |
|         5 |          tennis |          2 |       |        |     |
|         6 |          tennis |          2 |       |        |     |
|         7 |          tennis |          2 |       |        |     |
|         8 |          tennis |          2 |       |        |     |
| player_id |     player_name |            |       |        |     |
|         1 |               a |            |       |        |     |
|         2 |               b |            |       |        |     |
|         3 |               c |            |       |        |     |
|         4 |               d |            |       |        |     |
|         5 |               e |            |       |        |     |
|         6 |               f |            |       |        |     |
|         7 |               g |            |       |        |     |
|         8 |               h |            |       |        |     |
|  match_id |            home |       away |       |        |     |
|         1 |               1 |          2 |       |        |     |
|         2 |               3 |          4 |       |        |     |
|         3 |               5 |          6 |       |        |     |
|         4 |               7 |          8 |       |        |     |
|         5 |               2 |          3 |       |        |     |
|         6 |               6 |          7 |       |        |     |
|         7 |               1 |          4 |       |        |     |
|         8 |               5 |          8 |       |        |     |
|  match_id |      home_score | away_score |       |        |     |
|         1 |               0 |          1 |       |        |     |
|         2 |               1 |          0 |       |        |     |
|         3 |               0 |          1 |       |        |     |
|         4 |               1 |          0 |       |        |     |
|         1 |               0 |          1 |       |        |     |
|         2 |               1 |          0 |       |        |     |
|         3 |               0 |          1 |       |        |     |
|         4 |               1 |          0 |       |        |     |
|         5 |               0 |         10 |       |        |     |
|         6 |              10 |          0 |       |        |     |
|         7 |               0 |         10 |       |        |     |
|         8 |               1 |         10 |       |        |     |
| player_id |            wins |     losses | draws | points | omw |
|         1 |               0 |          2 |     0 |      0 |   6 |
|         5 |               0 |          2 |     0 |      0 |   6 |
|         2 |               1 |          1 |     0 |      3 |   6 |
|         6 |               2 |          0 |     0 |      6 |   6 |
|         7 |               1 |          1 |     0 |      3 |   6 |
|         3 |               2 |          0 |     0 |      6 |   6 |
|         4 |               1 |          1 |     0 |      3 |   6 |
|         8 |               1 |          1 |     0 |      3 |   6 |

** views--tournament_matches
*** tournament_matches views(assemble players, matches and results); player_tables
#+BEGIN_SRC sql :engine postgresql :database tourney_practice
select * from tournament_matches;
#+END_SRC

#+RESULTS:
| match_id | tournament_name | round | home | away | home_score | away_score |
|----------+-----------------+-------+------+------+------------+------------|
|        1 | tennis          |     1 |    1 |    2 |          1 |         10 |
|        2 | tennis          |     1 |    3 |    4 |         11 |          9 |
|        3 | tennis          |     1 |    5 |    6 |          2 |          1 |
|        4 | tennis          |     1 |    7 |    8 |          1 |          9 |
|        5 | tennis          |     2 |    1 |    3 |          1 |          0 |
|        6 | tennis          |     2 |    2 |    4 |         11 |          1 |
|        7 | tennis          |     2 |    5 |    7 |         12 |         10 |
|        8 | tennis          |     2 |    6 |    8 |          0 |          9 |


| match_id | tournament_name | round | home | away | home_score | away_score |
|----------+-----------------+-------+------+------+------------+------------|
|        1 | tennis          |     1 |    1 |    2 |          0 |          1 |
|        2 | tennis          |     1 |    3 |    4 |          1 |          0 |
|        3 | tennis          |     1 |    5 |    6 |          0 |          1 |
|        4 | tennis          |     1 |    7 |    8 |          1 |          0 |
|        5 | tennis          |     2 |    2 |    3 |          0 |         10 |
|        6 | tennis          |     2 |    6 |    7 |         10 |          0 |
|        7 | tennis          |     2 |    1 |    4 |          0 |         10 |
|        8 | tennis          |     2 |    5 |    8 |          1 |         10 |



#+RESULTS:
| player_id | wins | losses | draws | points | omw |
|-----------+------+--------+-------+--------+-----|
|         1 |    0 |      2 |     0 |      0 |   6 |
|         2 |    1 |      1 |     0 |      3 |   6 |
|         3 |    2 |      0 |     0 |      6 |   6 |
|         4 |    1 |      1 |     0 |      3 |   6 |
|         5 |    0 |      2 |     0 |      0 |   9 |
|         6 |    2 |      0 |     0 |      6 |   3 |
|         7 |    1 |      1 |     0 |      3 |   9 |
|         8 |    1 |      1 |     0 |      3 |   3 |
*** player_tables--just adds player_id to player_recordz and that's all?
#+BEGIN_SRC sql :engine postgresql :database tourney_practice
select * from player_recordz
ORDER BY points DESC, omw DESC ;
#+END_SRC

#+RESULTS:
| player_id | wins | losses | draws | points | omw |
|-----------+------+--------+-------+--------+-----|
|         2 |    2 |      0 |     0 |      6 |   3 |
|         8 |    2 |      0 |     0 |      6 |   0 |
|         5 |    2 |      0 |     0 |      6 |   0 |
|         1 |    1 |      1 |     0 |      3 |   9 |
|         3 |    1 |      1 |     0 |      3 |   3 |
|         7 |    0 |      2 |     0 |      0 |  12 |
|         6 |    0 |      2 |     0 |      0 |  12 |
|         4 |    0 |      2 |     0 |      0 |   9 |

#+BEGIN_SRC sql :engine postgresql :database tourney_practice
select * from player_tables
ORDER BY player_id;
;
#+END_SRC

#+RESULTS:
| player_id | player_name | wins | losses | draws | points | omw |
|-----------+-------------+------+--------+-------+--------+-----|
|         1 | a           |    1 |      1 |     0 |      3 |   9 |
|         2 | b           |    2 |      0 |     0 |      6 |   3 |
|         3 | c           |    1 |      1 |     0 |      3 |   3 |
|         4 | d           |    0 |      2 |     0 |      0 |   9 |
|         5 | e           |    2 |      0 |     0 |      6 |   0 |
|         6 | f           |    0 |      2 |     0 |      0 |  12 |
|         7 | g           |    0 |      2 |     0 |      0 |  12 |
|         8 | h           |    2 |      0 |     0 |      6 |   0 |


| player_id | player_name | wins | losses | draws | points | omw |
|-----------+-------------+------+--------+-------+--------+-----|
|         1 | a           |    0 |      2 |     0 |      0 |   6 |
|         2 | b           |    1 |      1 |     0 |      3 |   6 |
|         3 | c           |    2 |      0 |     0 |      6 |   0 |
|         4 | d           |    1 |      1 |     0 |      3 |   0 |
|         5 | e           |    0 |      2 |     0 |      0 |   0 |
|         6 | f           |    2 |      0 |     0 |      6 |   0 |
|         7 | g           |    1 |      1 |     0 |      3 |   0 |
|         8 | h           |    1 |      1 |     0 |      3 |   0 |
** view a provisional swissPairings
*** selects on equal wins and losses ONLY?
#+BEGIN_SRC sql :engine postgresql :database tourney_practice
SELECT a.player_id, a.OMW, a.wins, a.losses, a.draws, b.player_id, b.OMW, b.wins, b.losses, b.draws

FROM player_recordz as a, player_recordz as b

WHERE a.wins = b.wins AND a.losses = b.losses 

AND a.player_id < b.player_id

ORDER BY a.wins DESC, a.omw DESC;
#+END_SRC  

#+RESULTS:
| player_id | omw | wins | losses | draws | player_id | omw | wins | losses | draws |
|-----------+-----+------+--------+-------+-----------+-----+------+--------+-------|
|         2 |   3 |    2 |      0 |     0 |         8 |   0 |    2 |      0 |     0 |
|         2 |   3 |    2 |      0 |     0 |         5 |   0 |    2 |      0 |     0 |
|         5 |   0 |    2 |      0 |     0 |         8 |   0 |    2 |      0 |     0 |
|         1 |   9 |    1 |      1 |     0 |         3 |   3 |    1 |      1 |     0 |
|         6 |  12 |    0 |      2 |     0 |         7 |  12 |    0 |      2 |     0 |
|         4 |   9 |    0 |      2 |     0 |         7 |  12 |    0 |      2 |     0 |
|         4 |   9 |    0 |      2 |     0 |         6 |  12 |    0 |      2 |     0 |
*** select by points first
#+BEGIN_SRC sql :engine postgresql :database tourney_practice
SELECT a.player_id, a.points, a.OMW, b.player_id, b.points, b.OMW

FROM player_recordz as a, player_recordz as b

WHERE a.wins = b.wins AND a.losses = b.losses 

AND a.player_id < b.player_id

ORDER BY a.wins DESC, a.omw DESC;
#+END_SRC  

#+RESULTS:
| player_id | points | omw | player_id | points | omw |
|-----------+--------+-----+-----------+--------+-----|
|         2 |      6 |   3 |         8 |      6 |   0 |
|         2 |      6 |   3 |         5 |      6 |   0 |
|         5 |      6 |   0 |         8 |      6 |   0 |
|         1 |      3 |   9 |         3 |      3 |   3 |
|         6 |      0 |  12 |         7 |      0 |  12 |
|         4 |      0 |   9 |         7 |      0 |  12 |
|         4 |      0 |   9 |         6 |      0 |  12 |

* steps
** orientation
When coming back to this work, it can be tricky to quickly remember
what everything is, and what sequence of steps to take to reorient. 

I suggest that one way to do so is to work with "steps" (such as this
one). However, there are many levels and hierarchies of
remembering what series of steps are related and what larger,
over-arching categories they comprise. 

In the case of this project, /SQL steps/ is perhaps the best place to
begin, since I decided to focus on SQL, and thus the design is very
SQL-oriented.
** meta-steps (haha)

1. feel free to check:
[[*examples of running python code to do db interactions][examples of running python code to do db interactions]]
to see if anything is running or in the database

2. if not, evaluate:
[[*python definitions (except SwissPairings)][python definitions (except SwissPairings)]]

3. check examples of running python code again
4. evaluate one particular implementation of swissPairings and test it
5. go back to 'create tournament':
[[*create example tournaments using only Python functions][create example tournaments using only Python functions]]
6. use SQL with orgmode for experiments
and experiment with creating different tournament results to get
different pairings 
** can you remember how to make tournaments (using SQL)?
*** what tables do you need?
see [[*all setups][all setups]], specifically 'tourney_practice' CREATE
or [[*tourney setup broken up by statement][tourney setup broken up by statement]]
*** ready to clear data from tables and setup again?

[[*drop][drop]]
#+BEGIN_SRC 
DROP TABLE playerz CASCADE; 
DROP TABLE matchez CASCADE; 
DROP TABLE match_participants; 
DROP TABLE score_results; 
DROP TABLE player_recordz;
#+END_SRC
[[*create 5 tables and views][create 5 tables and views]]
[[*create functions][create functions]]

You will clear everything and to see that all this has succeeded,
visit 
[[*display contents of tables and views][display contents of tables and views]]
*** prepare matches and players
**** one template--tennis; 8 players, a-h;
***** links to individual code
[[*tourney insert broken up by statement][tourney insert broken up by statement]]
[[*insert player names for any tournament (single character names like 'a')][insert player names for any tournament (single character names like'a')]]
[[id:1059C480-16E9-4571-B8BF-4D96B01B95BC][insert 'player id' numbering in the 'records' table to prepare for later insertions]]
***** what your tables will look like after preparing all the tables
#+RESULTS:
|  match_id | tournament_name |      round |       |        |     |
|-----------+-----------------+------------+-------+--------+-----|
|         1 | tennis          |          1 |       |        |     |
|         2 | tennis          |          1 |       |        |     |
|         3 | tennis          |          1 |       |        |     |
|         4 | tennis          |          1 |       |        |     |
|         5 | tennis          |          2 |       |        |     |
|         6 | tennis          |          2 |       |        |     |
|         7 | tennis          |          2 |       |        |     |
|         8 | tennis          |          2 |       |        |     |
| player_id | player_name     |            |       |        |     |
|         1 | a               |            |       |        |     |
|         2 | b               |            |       |        |     |
|         3 | c               |            |       |        |     |
|         4 | d               |            |       |        |     |
|         5 | e               |            |       |        |     |
|         6 | f               |            |       |        |     |
|         7 | g               |            |       |        |     |
|         8 | h               |            |       |        |     |
|  match_id | home            |       away |       |        |     |
|  match_id | home_score      | away_score |       |        |     |
| player_id | wins            |     losses | draws | points | omw |
|         1 | 0               |          0 |     0 |      0 |   0 |
|         2 | 0               |          0 |     0 |      0 |   0 |
|         3 | 0               |          0 |     0 |      0 |   0 |
|         4 | 0               |          0 |     0 |      0 |   0 |
|         5 | 0               |          0 |     0 |      0 |   0 |
|         6 | 0               |          0 |     0 |      0 |   0 |
|         7 | 0               |          0 |     0 |      0 |   0 |
|         8 | 0               |          0 |     0 |      0 |   0 |
***** tables after inserting first round results
#+RESULTS:
|  match_id | tournament_name |      round |       |        |     |
|-----------+-----------------+------------+-------+--------+-----|
|         1 | tennis          |          1 |       |        |     |
|         2 | tennis          |          1 |       |        |     |
|         3 | tennis          |          1 |       |        |     |
|         4 | tennis          |          1 |       |        |     |
|         5 | tennis          |          2 |       |        |     |
|         6 | tennis          |          2 |       |        |     |
|         7 | tennis          |          2 |       |        |     |
|         8 | tennis          |          2 |       |        |     |
| player_id | player_name     |            |       |        |     |
|         1 | a               |            |       |        |     |
|         2 | b               |            |       |        |     |
|         3 | c               |            |       |        |     |
|         4 | d               |            |       |        |     |
|         5 | e               |            |       |        |     |
|         6 | f               |            |       |        |     |
|         7 | g               |            |       |        |     |
|         8 | h               |            |       |        |     |
|  match_id | home            |       away |       |        |     |
|         1 | 1               |          2 |       |        |     |
|         2 | 3               |          4 |       |        |     |
|         3 | 5               |          6 |       |        |     |
|         4 | 7               |          8 |       |        |     |
|  match_id | home_score      | away_score |       |        |     |
|         1 | 0               |          1 |       |        |     |
|         2 | 1               |          0 |       |        |     |
|         3 | 0               |          1 |       |        |     |
|         4 | 1               |          0 |       |        |     |
| player_id | wins            |     losses | draws | points | omw |
|         1 | 0               |          1 |     0 |      0 |   3 |
|         2 | 1               |          0 |     0 |      3 |   0 |
|         3 | 1               |          0 |     0 |      3 |   0 |
|         4 | 0               |          1 |     0 |      0 |   3 |
|         5 | 0               |          1 |     0 |      0 |   3 |
|         6 | 1               |          0 |     0 |      3 |   0 |
|         7 | 1               |          0 |     0 |      3 |   0 |
|         8 | 0               |          1 |     0 |      0 |   3 |
**** reuse tempate--soccer; 8 teams, a-h;
#+BEGIN_SRC sql :engine postgresql :database tourney_practice

INSERT INTO matchez (match_id, tournament_name, round) VALUES (1, 'soccer', 1);
INSERT INTO matchez (match_id, tournament_name, round) VALUES (2, 'soccer', 1);
INSERT INTO matchez (match_id, tournament_name, round) VALUES (3, 'soccer', 1);
INSERT INTO matchez (match_id, tournament_name, round) VALUES (4, 'soccer', 1);
INSERT INTO matchez (match_id, tournament_name, round) VALUES (5, 'soccer', 2);
INSERT INTO matchez (match_id, tournament_name, round) VALUES (6, 'soccer', 2);
INSERT INTO matchez (match_id, tournament_name, round) VALUES (7, 'soccer', 2);
INSERT INTO matchez (match_id, tournament_name, round) VALUES (8, 'soccer', 2);

-- should inserting a player name into playerz trigger a player_id insert into player_recordz?
#+END_SRC

#+BEGIN_SRC sql :engine postgresql :database tourney_practice
INSERT INTO playerz (player_name) VALUES ('a');
INSERT INTO playerz (player_name) VALUES ('b');
INSERT INTO playerz (player_name) VALUES ('c');
INSERT INTO playerz (player_name) VALUES ('d');
INSERT INTO playerz (player_name) VALUES ('e');
INSERT INTO playerz (player_name) VALUES ('f');
INSERT INTO playerz (player_name) VALUES ('g');
INSERT INTO playerz (player_name) VALUES ('h');
#+END_SRC

#+BEGIN_SRC sql :engine postgresql :database tourney_practice
INSERT INTO player_recordz (player_id) VALUES (1);
-- INSERT INTO player_recordz (player_id) VALUES IN [1, 2];
INSERT INTO player_recordz (player_id) VALUES (2);
INSERT INTO player_recordz (player_id) VALUES (3);
INSERT INTO player_recordz (player_id) VALUES (4);
INSERT INTO player_recordz (player_id) VALUES (5);
INSERT INTO player_recordz (player_id) VALUES (6);
INSERT INTO player_recordz (player_id) VALUES (7);
INSERT INTO player_recordz (player_id) VALUES (8);
#+END_SRC
** convert all database insertions to use python ONLY!
*** do initialize tournaments in Python
[[id:236D906F-20D1-499B-9E78-BD524C05A5D0][create example tournaments using only Python functions]]
*** calculate records in python
**** load the basic definitions of python functions
[[id:767CBA32-990F-44B0-B1BE-0F51806648F9][functions don't assume a db or table (but do assume column names)]]
**** find and load the in-development python code
 [[id:A52FC1A6-0333-4B0F-B54F-2FAB13218B39][retrieve a select * call]]
