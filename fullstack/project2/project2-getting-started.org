 
* Tournament Results: Getting Started 
PDF Download 
 
In Project 2, you will be writing a Python module that uses the PostgreSQL database to keep 
track of players and matches in a game tournament.  
 
Project 2 was designed to teach you how to create and use databases through the use of 
database schemas and how to manipulate the data inside the database. This project has two 
parts: defining the database schema (SQL table definitions) in tournament.sql, and writing 
code that will use it to track a Swiss tournament in tournament.py. 
 
Getting Started 
 You will complete this project within the Vagrant virtual machine we've provided and 
configured for you. If you would like to review that before moving on refer to the 
course 
materials
 for help with installing Vagrant and Virtual Box, and previously recorded 
office 
hours
 where we'll show you how to use Vagrant.  
 First,
 fork 
the 
fullstacknanodegreevm repository
 so that you have a version of 
your own within your Github account. 
 Next clone 
your
 fullstacknanodegreevm repo to your local machine.  
 Now, lets explore the starter code for this project provided within the VM: 
c
d

 into 
/
v
a
g
r
a
n
t
/
t
o
u
r
n
a
m
e
n
t

 where you will see there are 3 files you have to work with on 
this project: 
 t
o
u
r
n
a
m
e
n
t
.
s
q
l
 t
o
u
r
n
a
m
e
n
t
.
p
y
 
 t
o
u
r
n
a
m
e
n
t
_
t
e
s
t
.
p
y
 
 
Understand the purpose of each file 
 tournament.sql  
 this file is used to set up your database schema (the table 
representation of your data structure).  
 tournament.py 
 this file is used to provide access to your database via a library of 
functions which can add, delete or query data in your database to another python 
program (a client program). Remember that when you define a function, it does not 
execute, it simply means the function is defined to run a specific set of instructions when 
called.  
 tournament_test.py 
 this is a client program which will use your functions written in 
the tournament.py module. We've written this client program to test your implementation 
of functions in tournament.py 
 
 
Using the Vagrant Virtual Machine  
 The Vagrant VM has PostgreSQL installed and configured, as well as the psql 
command line interface 
(CLI)
, so that you don't have to install or configure them on your 
local machine. 
 To use the Vagrant virtual machine, navigate to the 
fullstacknanodegreevm/tournament directory in the terminal, then 
use the command 
v
a
g
r
a
n
tu
p

 (powers on the virtual machine) followed by 
v
a
g
r
a
n
ts
s
h
(logs into the 
virtual machine)
.  
 Remember, once you have executed the 
v
a
g
r
a
n
ts
s
h

 command, you will want to 
c
d
/
v
a
g
r
a
n
t

 to change directory to the 
synced folders
 in order to work on your project, 
once your cd /vagrant, if you type 
l
s

 on the command line, you'll see your
t
o
u
r
n
a
m
e
n
t
folder. 
 The Vagrant VM provided in the fullstack repo already has PostgreSQL server installed, 
as well as the psql command line interface (CLI), so you'll need to have your VM on and 
be logged into it to run your database configuration file (
t
o
u
r
n
a
m
e
n
t
.
s
q
l

), and test 
your Python file with 
t
o
u
r
n
a
m
e
n
t
_
t
e
s
t
.
p
y

. 
 
Using the psql command line interface 
 The very first time we start working on this project, no database will exist  so first, we'll 
need to create the SQL database for our tournament project. From psql, we can do this 
on the command line directly using a create statement or by importing 
t
o
u
r
n
a
m
e
n
t
.
s
q
l
(which then executes whatever commands are in the .sql script). 
 t
o
u
r
n
a
m
e
n
t
.
s
q
l

 is where we'll create our database schema and views we also have 
the option of creating the database and tables in this file. 
 With psql, you can run any SQL query on the tables of the currently connected 
database. 
 When using psql, remember to end SQL statements with a semicolon, which is not 
always required from Python. 
 To build and access the database we run 
p
s
q
l

 followed by 
\
it
o
u
r
n
a
m
e
n
t
.
s
q
l
 
Command  Description  Usage  Action 
p
s
q
l l
a
u
n
c
h
e
st
h
ep
s
q
l
c
o
m
m
a
n
dl
i
n
ei
n
t
e
r
f
a
c
e
p
s
q
lt
o
u
r
n
a
m
e
n
t l
a
u
n
c
h
e
sa
n
dc
o
n
n
e
c
t
st
o
t
o
u
r
n
a
m
e
n
td
a
t
a
b
a
s
e
\
c c
o
n
n
e
c
t \
ct
o
u
r
n
a
m
e
n
t c
o
n
n
e
c
t
st
ot
h
et
o
u
r
n
a
m
e
n
t
d
a
t
a
b
a
s
e
,d
r
o
p
sc
o
n
n
e
c
t
i
o
nt
o
p
r
e
v
i
o
u
sd
a
t
a
b
a
s
e
\
i i
m
p
o
r
t \
it
o
u
r
n
a
m
e
n
t
.
s
q
l e
x
e
c
u
t
e
st
h
es
q
lc
o
m
m
a
n
d
sw
i
t
h
i
n
t
h
es
q
lf
i
l
ef
r
o
mp
s
q
l
\
? h
e
l
p \
? g
e
th
e
l
pw
i
t
hp
s
q
lc
o
m
m
a
n
d
s
\
q q
u
i
t \
q q
u
i
tt
h
ep
s
q
lc
o
m
m
a
n
dl
i
n
e
i
n
t
e
r
f
a
c
e
\
d d
e
s
c
r
i
b
e \
dm
a
t
c
h
e
s d
e
s
c
r
i
b
e
st
h
et
a
b
l
es
t
r
u
c
t
u
r
e
\
d
t l
i
s
tt
a
b
l
e
s \
d
t l
i
s
tt
a
b
l
e
si
nc
u
r
r
e
n
td
a
t
a
b
a
s
e
 
There are many more psql commands you will find useful! 
Here are two psql cheat sheets for 
your reference: 
http://www.postgresonline.com/downloads/special_feature/postgresql83_psql_cheatsheet.pdf 
http://www.petefreitag.com/cheatsheets/postgresql/  
 
Using the tournament.sql file 
The tournament.sql file should be used for setting up your schema and database prior to a 
client making use of the database for reporting and managing tournament players and 
matches. This file will only be ran once by a client setting up a new tournament database, 
however we will probably run this file many times as we work on this project. 
 
An sql file can contain any sql commands, however we only need to create the database, 
tables, and views in the tournament.sql file, because we will be running queries from our 
Python file. The purpose of this file is to set up our data structure: the tables and views. 
Because we are using psql, you can also utilize psql commands in this file, for example 
towards the beginning of the file I would include a "\c tournament" command to connect to the 
tournament database. 
 
Our recommendation is to test your sql commands on the psql command line before placing 
them in your sql file. Once you've determined how you want to structure your database and 
tables, write those commands into your SQL file. 
 
A successful development process for this project will mean you are 
likely cycling between psql command line for experimenting with sql 
commands and queries, and writing these commands programmatically 
into either tournament.sql or tournament.py. 
 
 
 
   
First off, we need to create the database and connect to it. To do so, we use the commands: 
v
a
g
r
a
n
t
@
t
r
u
s
t
y
3
2
:v
a
g
r
a
n
t=
>C
R
E
A
T
ED
A
T
A
B
A
S
Et
o
u
r
n
a
m
e
n
t
;
v
a
g
r
a
n
t
@
t
r
u
s
t
y
3
2
:v
a
g
r
a
n
t=
>\
ct
o
u
r
n
a
m
e
n
t
;
v
a
g
r
a
n
t
@
t
r
u
s
t
y
3
2
:t
o
u
r
n
a
m
e
n
t=
>
Once we have created a database, we can add the tables that we will be working with. A very 
basic tournament would need at least a Players and Matches table. We can create them with 
the command: 
C
R
E
A
T
ET
A
B
L
E[
t
a
b
l
en
a
m
e
]
(
.
.
.
.
)
;
As a reminder, you may include these commands in your tournament.sql file, and it will 
execute when you run  
v
a
g
r
a
n
t
@
t
r
u
s
t
y
3
2
:p
s
q
l=
>\
it
o
u
r
n
a
m
e
n
t
.
s
q
l
v
a
g
r
a
n
t
@
v
a
g
r
a
n
t
-
u
b
u
n
t
u
-
t
r
u
s
t
y
-
3
2
:
/
v
a
g
r
a
n
t
/
t
o
u
r
n
a
m
e
n
t
$p
s
q
l
v
a
g
r
a
n
t
=
>\
it
o
u
r
n
a
m
e
n
t
.
s
q
l
Y
o
ua
r
en
o
wc
o
n
n
e
c
t
e
dt
od
a
t
a
b
a
s
e"
t
o
u
r
n
a
m
e
n
t
"a
su
s
e
r"
v
a
g
r
a
n
t
"
.
t
o
u
r
n
a
m
e
n
t
=
>
 
Because we are likely to revise the structure of our tables by adding or removing columns, and 
restructure our database by adding tables and views, if we rely on the sql file, we will be 
running it multiple times, and as a result will likely see this error at some point:  
v
a
g
r
a
n
t
@
t
r
u
s
t
y
3
2
:p
s
q
l=
>E
R
R
O
R
:c
r
e
a
t
e
d
b
:d
a
t
a
b
a
s
e"
t
o
u
r
n
a
m
e
n
t
"a
l
r
e
a
d
y
e
x
i
s
t
s
.
If you look up the SQL command, DROP IF EXISTS, you might decide you want to include this 
in your SQL file, to address the error above and allow you to use your SQL file repeatedly as 
you revise your schema. 
 
You'll need to determine what columns are necessary, and their data types, and include these 
in the create table command (which can be done from the psql command line to get started, 
and later added to the .sql file once you are more decided on your table structure).  
 
 
   
tournament.py and tournament_test.py 
 
Rely on the unit tests in 
t
o
u
r
n
a
m
e
n
t
_
t
e
s
t
.
p
y
as you write your code. Writing your 
tournament module should  be done in conjunction with testing using the
t
o
u
r
n
a
m
e
n
t
_
t
e
s
t
.
p
y

 file  If you implement the functions in the order they appear, the test 
suite can help you incrementally test your code as you write each function. Each function has a 
corresponding test function and you can comment out the corresponding tests for function you 
have yet to implement. 
  
Recall the sequence of SQL query commands needed to manipulate database records: 
c
o
n
n=c
o
n
n
e
c
t
(
)
c=c
o
n
n
.
c
u
r
s
o
r
(
)
c
.
e
x
e
c
u
t
e
(
"
y
o
u
rq
u
e
r
y
;
"
)
c
o
n
n
.
c
o
m
m
i
t
(
)
c
o
n
n
.
c
l
o
s
e
(
)
   
The various functions in 
t
o
u
r
n
a
m
e
n
t
.
p
y

 and their corresponding test functions in 
t
o
u
r
n
a
m
e
n
t
_
t
e
s
t
.
p
y

 are: 
t
o
u
r
n
a
m
e
n
t
.
p
y
function  t
o
u
r
n
a
m
e
n
t
_
t
e
s
t
.
p
y
test 
function 
c
o
n
n
e
c
t
Meant to connect to the database. Already set up for 
you.
d
e
l
e
t
e
M
a
t
c
h
e
s
Remove all the matches records from the database.
t
e
s
t
D
e
l
e
t
e
M
a
t
c
h
e
s
d
e
l
e
t
e
P
l
a
y
e
r
s
Remove all the player records from the database.
t
e
s
t
D
e
l
e
t
e
c
o
u
n
t
P
l
a
y
e
r
s
Returns the number of players currently registered
t
e
s
t
C
o
u
n
t
r
e
g
i
s
t
e
r
P
l
a
y
e
r-
-
Adds a player to the 
tournament database.
t
e
s
t
R
e
g
i
s
t
e
r
,
t
e
s
t
R
e
g
i
s
t
e
r
C
o
u
n
t
D
e
l
e
t
e
p
l
a
y
e
r
S
t
a
n
d
i
n
g
s-
-
Returns a list of the players and their win records, 
sorted by wins. You can use the player standings 
table created in your .sql file for reference.
t
e
s
t
S
t
a
n
d
i
n
g
s
B
e
f
o
r
e
M
a
t
c
h
e
s
r
e
p
o
r
t
M
a
t
c
h
This is to simply populate the matches table and 
record the winner and loser as (winner,loser) in the 
insert statement.
t
e
s
t
R
e
p
o
r
t
M
a
t
c
h
e
s
s
w
i
s
s
P
a
i
r
i
n
g
s
Returns a list of pairs of players for the next round of 
a match. Here all we are doing is the pairing of 
alternate players from the player standings table, 
zipping them up and appending them to a list with 
values: 
(id1, name1, id2, name2)
t
e
s
t
P
a
i
r
i
n
g
s
 
   
Running your project! 
 
Once you have your .sql and .py files set up, it's a good idea to test them out against the 
testing file provided to you (tournament_test.py). To run the series of tests defined in this test 
suite, run the program from the command line 
>
>p
y
t
h
o
nt
o
u
r
n
a
m
e
n
t
_
t
e
s
t

.  
i
f_
_
n
a
m
e
_
_=
='
_
_
m
a
i
n
_
_
'
:
t
e
s
t
D
e
l
e
t
e
M
a
t
c
h
e
s
(
)
t
e
s
t
D
e
l
e
t
e
(
)
t
e
s
t
C
o
u
n
t
(
)
t
e
s
t
R
e
g
i
s
t
e
r
(
)
t
e
s
t
R
e
g
i
s
t
e
r
C
o
u
n
t
D
e
l
e
t
e
(
)
t
e
s
t
S
t
a
n
d
i
n
g
s
B
e
f
o
r
e
M
a
t
c
h
e
s
(
)
t
e
s
t
R
e
p
o
r
t
M
a
t
c
h
e
s
(
)
t
e
s
t
P
a
i
r
i
n
g
s
(
)
p
r
i
n
t"
S
u
c
c
e
s
s
! A
l
lt
e
s
t
sp
a
s
s
!
"
 
And you should be able to see the following output once all your tests have passed:
v
a
g
r
a
n
t
@
v
a
g
r
a
n
t
-
u
b
u
n
t
u
-
t
r
u
s
t
y
-
3
2
:
/
v
a
g
r
a
n
t
/
t
o
u
r
n
a
m
e
n
t
$p
y
t
h
o
n
t
o
u
r
n
a
m
e
n
t
_
t
e
s
t
.
p
y
1
.O
l
dm
a
t
c
h
e
sc
a
nb
ed
e
l
e
t
e
d
.
2
.P
l
a
y
e
rr
e
c
o
r
d
sc
a
nb
ed
e
l
e
t
e
d
.
3
.A
f
t
e
rd
e
l
e
t
i
n
g
,c
o
u
n
t
P
l
a
y
e
r
s
(
)r
e
t
u
r
n
sz
e
r
o
.
4
.A
f
t
e
rr
e
g
i
s
t
e
r
i
n
gap
l
a
y
e
r
,c
o
u
n
t
P
l
a
y
e
r
s
(
)r
e
t
u
r
n
s1
.
5
.P
l
a
y
e
r
sc
a
nb
er
e
g
i
s
t
e
r
e
da
n
dd
e
l
e
t
e
d
.
6
.N
e
w
l
yr
e
g
i
s
t
e
r
e
dp
l
a
y
e
r
sa
p
p
e
a
ri
nt
h
es
t
a
n
d
i
n
g
sw
i
t
hn
om
a
t
c
h
e
s
.
7
.A
f
t
e
ram
a
t
c
h
,p
l
a
y
e
r
sh
a
v
eu
p
d
a
t
e
ds
t
a
n
d
i
n
g
s
.
8
.A
f
t
e
ro
n
em
a
t
c
h
,p
l
a
y
e
r
sw
i
t
ho
n
ew
i
na
r
ep
a
i
r
e
d
.
S
u
c
c
e
s
s
! A
l
lt
e
s
t
sp
a
s
s
!
v
a
g
r
a
n
t
@
v
a
g
r
a
n
t
-
u
b
u
n
t
u
-
t
r
u
s
t
y
-
3
2
:
/
v
a
g
r
a
n
t
/
t
o
u
r
n
a
m
e
n
t
$
To Submit 
Once you have finished your project, go to this link 
here
. If you have a Github account (which 
we recommend), connect with Github to get started. If you do not have a Github account, 
follow the instructions 
here
 for Mac OS X 10.0 or later, 
here
 for Windows 7, 8, or 8.1, or 
here 
for anything else. These links will help you create a Github account to submit your project. 
 
If you run into any trouble, send us an email at 
fullstackproject@udacity.com
, and we will be 
more than happy to help you.   
Example of a 16 Player Swiss Tournament: 
 
First round pairing is by random draw. For example, with 16 players they would be matched 
into 8 random pairs for the first round. For now, assume all games have a winner, and there 
are no draws. 
 
After the first round
, there will be a group of 8 players with a score of 1 (win), and a group of 
8 players with a score of 0 (loss). For the 2nd round, players in each scoring group will be 
paired against each other ­ 1's versus 1's and 0's versus 0's. 
 
After round 2,
 there will be three scoring groups: 
4 players who have won both games and have 2 points 
8 players who have won a game and lost a game and have 1 point 
4 players who have lost both games and have no points. 
 
Again, for round 3
, players are paired with players in their scoring group. After the third 
round, the typical scoring groups will be: 
2 players who have won 3 games (3 points) 
6 players with 2 wins (2 points) 
6 players with 1 win (1 point) 
2 players with no wins (0 points) 
 
For the fourth (and in this case final) round
, the process repeats, and players are matched 
with others in their scoring group. Note that there are only 2 players who have won all of their 
games so far ­ they will be matched against each other for the "championship" game. After the 
final round, we'll have something that looks like this: 
1 player with 4 points ­ the winner! 
4 players with 3 points ­ tied for second place 
6 players with 2 points 
4 players with 1 point 
1 player with 0 points 
 
The Swiss system produces a clear winner in just a few rounds, noone is eliminated and 
almost everyone wins at least one game, but there are many ties to deal with. 
 
 
 

