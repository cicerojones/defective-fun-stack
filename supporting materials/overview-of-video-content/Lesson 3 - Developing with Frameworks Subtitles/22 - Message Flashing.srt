0:00:00.220,0:00:01.170
Good applications and

0:00:01.170,0:00:04.840
user interfaces, incorporate feedback[br]throughout the user experience.

0:00:04.840,0:00:07.013
If the user does not get enough[br]feedback they'll probably,

0:00:07.013,0:00:08.590
end up hating the application.

0:00:08.590,0:00:09.545
We should add a feature,

0:00:09.545,0:00:13.305
that explicitly notifies the user that[br]the system has responded to their input.

0:00:13.305,0:00:17.030
Flask provides a really simple[br]way to give feedback to a user.

0:00:17.030,0:00:20.020
Message Flashing is a feature that[br]will prompt a message to the user

0:00:20.020,0:00:22.780
immediately, after a certain[br]action has taken place, and

0:00:22.780,0:00:25.110
then disappear the next[br]time the page is requested.

0:00:25.110,0:00:28.070
We can use our templates to reveal[br]a flash message, wherever and

0:00:28.070,0:00:30.460
however we want,[br]from within the application.

0:00:30.460,0:00:34.140
To get started, let's import[br]flash from our Flask module.

0:00:34.140,0:00:37.520
Flashing works in Flask by using[br]a concept, called sessions.

0:00:37.520,0:00:39.690
This course does not go too,[br]in depth with sessions.

0:00:39.690,0:00:43.100
But just know that sessions are a way,[br]a server can store information across

0:00:43.100,0:00:46.740
multiple Web pages, to create a more[br]personalized user experience.

0:00:46.740,0:00:50.400
In the bottom of our project.pi file,[br]let's first add a secret key,

0:00:50.400,0:00:53.080
which flask will use to create[br]sessions for our users.

0:00:53.080,0:00:55.020
Normally, this should be[br]a very secure password,

0:00:55.020,0:00:57.190
if our application was live[br]on the Internet but for

0:00:57.190,0:01:01.100
development purposes, let's just[br]set our key to super_secret_key.

0:01:01.100,0:01:03.140
To flash the message[br]within our application,

0:01:03.140,0:01:05.407
we simply use the flash[br]function like this.

0:01:05.407,0:01:10.715
To get a hold of all of the flash[br]messages, we can use get_flash_messages,

0:01:10.715,0:01:12.885
which will also work from[br]within our templates.

0:01:12.885,0:01:14.515
So, from within my new menu item method,

0:01:14.515,0:01:18.115
I will create a flash message,[br]right after I call, session.commit.

0:01:18.115,0:01:21.893
I will add the message,[br]("new" menu item created!") now,

0:01:21.893,0:01:26.290
in my newmenuitem.html template,[br]I will add the following code.

0:01:26.290,0:01:29.720
If you are not familiar, with this[br]with construct in Python, don't worry.

0:01:29.720,0:01:31.720
It's just a block that does[br]some automatic clean-up,

0:01:31.720,0:01:34.730
when the block is exited, that we don't[br]really have to concern ourselves with.

0:01:34.730,0:01:36.660
If you are curious about[br]the with method in Python,

0:01:36.660,0:01:39.160
I will provide some resources[br]in the instructor notes.

0:01:39.160,0:01:41.881
The get_flashed_messages,[br]is returning an array of messages,

0:01:41.881,0:01:44.980
that's going to get stored in[br]this variable, called messages.

0:01:44.980,0:01:48.070
We then loop through the array of[br]message, if it's not empty, and

0:01:48.070,0:01:51.130
print it out to our HTML document[br]inside an Unordered List.

0:01:51.130,0:01:53.205
Now, when I save my code,[br]and try making a new item,

0:01:53.205,0:01:56.272
and flashed with a new confirmation[br]message on my main menu screen.
