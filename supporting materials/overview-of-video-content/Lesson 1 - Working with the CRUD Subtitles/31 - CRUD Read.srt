0:00:00.230,0:00:03.770
Now that we have a database that's not[br]empty, let's start reading from it.

0:00:03.770,0:00:07.030
In the last video, you saw me call[br]session.query(Restaurant).all.

0:00:07.030,0:00:10.914
If I create a variable called[br]firstResult and set it equal to

0:00:10.914,0:00:14.810
session.query(Restaurant) and[br]use .first this time,

0:00:14.810,0:00:18.660
I now have a variable that corresponds[br]to a single row in my database.

0:00:18.660,0:00:22.870
These single row references allow me to[br]extract column entries as method names.

0:00:22.870,0:00:25.930
So if I were to write firstResult.name,

0:00:25.930,0:00:29.500
I'm given the name of my restaurant[br]object as it is stored in the database.

0:00:29.500,0:00:33.740
Currently, I only have one restaurant[br]and one menu item stored in my database.

0:00:33.740,0:00:37.030
Well that's kind of boring, but with[br]the help from some fellow Udations I've

0:00:37.030,0:00:40.040
created a Python script that will[br]populate my database with several

0:00:40.040,0:00:43.216
different restaurants and menu items[br]popular amongst the Udasity team.

0:00:43.216,0:00:47.180
Download the lotsofmenus.py script[br]into your working directory and

0:00:47.180,0:00:49.680
execute it from the command line as so.

0:00:49.680,0:00:53.589
Now when we perform executions like[br]session.query(Restaurant).all,

0:00:53.589,0:00:56.110
we get back a whole list of results.

0:00:56.110,0:00:59.370
So what happens when I have a query[br]that returns a collection of results and

0:00:59.370,0:01:02.180
we want to display column[br]information for each item?

0:01:02.180,0:01:06.230
For this, we can use a python for loop[br]to return the data that we want to see.

0:01:06.230,0:01:07.980
Here, let's do an example.

0:01:07.980,0:01:09.900
I will make a variable called items and

0:01:09.900,0:01:13.270
set it equal to a query that[br]retrieves all of my menu items.

0:01:13.270,0:01:17.710
Now, I can say for[br]item in items, print item.name.

0:01:17.710,0:01:21.522
Now I get back a printed line of[br]each item name in our database.

0:01:21.522,0:01:24.710
SQL Alchemy has an extensive[br]collection of queries we can perform on

0:01:24.710,0:01:25.720
our database.

0:01:25.720,0:01:28.570
Take some time to explore[br]the query documentation here and

0:01:28.570,0:01:30.280
play around with the database for[br]a while.

0:01:30.280,0:01:31.240
When you're ready,

0:01:31.240,0:01:33.340
move on to some of the challenge[br]problems in the next section.
