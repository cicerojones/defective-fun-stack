0:00:00.290,0:00:03.220
In the previous video, I introduced[br]a lot of new concepts that may or

0:00:03.220,0:00:04.806
may not be familiar to you.

0:00:04.806,0:00:06.270
To see all of these concepts in action,

0:00:06.270,0:00:10.530
in this section we're going to build our[br]own web server in Python that not only

0:00:10.530,0:00:14.480
renders web pages in a browser, but by[br]processing data submitted by the user,

0:00:14.480,0:00:17.990
can create a unique web page each[br]time a user modifies the input.

0:00:17.990,0:00:22.000
To get started let's create a new[br]Python file called webserver.py and

0:00:22.000,0:00:25.000
save it in the same directory[br]as your restaurantmenu.db.

0:00:25.000,0:00:29.520
And databasesetup.py files so we can[br]access it from our vagrant machine.

0:00:29.520,0:00:32.990
Follow along with me using Sublime or[br]your favorite text editor.

0:00:32.990,0:00:35.760
One of the cool things about Python is[br]that it comes with a large collection of

0:00:35.760,0:00:38.035
libraries we can use[br]right out of the box.

0:00:38.035,0:00:41.065
We will be using the HTTP base[br]server library extensively to

0:00:41.065,0:00:42.305
create this project.

0:00:42.305,0:00:45.775
Take a minute to skim over the HTTP[br]base server documentation on

0:00:45.775,0:00:47.705
the official Python[br]documentation website.

0:00:47.705,0:00:53.865
I will add from BaseHTTPServer[br]import BaseHTTPRequestHandler and

0:00:53.865,0:00:57.835
HTTPServer to the first line of my[br]webserver.py file to be able to

0:00:57.835,0:01:01.050
take advantage of this[br]BaseHTTPServer functionality.

0:01:01.050,0:01:04.530
Our web server code will have two[br]main sections, the main method and

0:01:04.530,0:01:05.800
the handler class.

0:01:05.800,0:01:09.790
In main we instantiate our server and[br]specify what port it will listen on.

0:01:09.790,0:01:13.450
Our handler code indicates what code[br]to execute based on the type of

0:01:13.450,0:01:15.230
HTTP request that is sent to the server.

0:01:15.230,0:01:19.040
I will start by coding a main method[br]as the entry point of my code.

0:01:19.040,0:01:21.810
I'll add this block of code at[br]the end of my file to immediately run

0:01:21.810,0:01:25.500
the main method when the Python[br]interpreter executes my script.

0:01:25.500,0:01:28.170
Inside this main method,[br]I will add a try except block.

0:01:28.170,0:01:31.650
The Python interpreter will try to[br]attempt the code inside the try block.

0:01:31.650,0:01:35.650
And if a defined event occurs, we can[br]exit out of the code with an exception.

0:01:35.650,0:01:38.050
The exception I want to[br]handle is KeyboardInterrupt.

0:01:38.050,0:01:40.900
This is a built-in exception in[br]Python that can be triggered when

0:01:40.900,0:01:43.430
the user holds Ctrl+C on the keyboard.

0:01:43.430,0:01:45.090
Going back inside my try block,

0:01:45.090,0:01:48.200
I will create an instance[br]of an HTTP server class.

0:01:48.200,0:01:49.525
Looking at the documentation for

0:01:49.525,0:01:53.280
HTTPServer, I see that I can[br]create a web server like so.

0:01:53.280,0:01:57.690
In the documentation we also see that[br]HTTPServer is built off of a TCPServer

0:01:57.690,0:02:01.380
class, indicating the transmission[br]protocol that this server will use.

0:02:01.380,0:02:05.760
Server address is a tuple that contains[br]the host and port number for our server.

0:02:05.760,0:02:09.370
I will leave host as an empty string and[br]specify our port number with an integer.

0:02:09.370,0:02:11.860
I will define port in[br]a separate variable, and

0:02:11.860,0:02:13.670
create my server instance as so.

0:02:13.670,0:02:16.630
Notice that I just made up a name,[br]webserverHandler, for

0:02:16.630,0:02:17.910
the request handler class.

0:02:17.910,0:02:21.160
I will define my webserverHandler[br]in the next section of code.

0:02:21.160,0:02:24.260
But first, let me add some[br]finishing code to the main method.

0:02:24.260,0:02:27.140
After I create the server I'll add[br]a print statement to know that my

0:02:27.140,0:02:28.450
server is running.

0:02:28.450,0:02:32.860
Then I will use this serve_forever[br]function built into my HTTPServer to

0:02:32.860,0:02:37.320
keep it constantly listening until I[br]call Ctrl+C or exit the application.

0:02:37.320,0:02:40.579
Inside my KeyboardInterrupt exception[br]I will shut down the server by

0:02:40.579,0:02:42.750
calling server.socket.close.

0:02:42.750,0:02:44.010
And I have another print statement,

0:02:44.010,0:02:46.700
just letting me know that[br]the server was properly stopped.

0:02:46.700,0:02:47.770
Above my main method,

0:02:47.770,0:02:52.690
I will now define the webserverHandler[br]class that I called in my HTTPServer,

0:02:52.690,0:02:56.340
and have it extend from a class[br]called BaseHTTPRequestHandler.

0:02:56.340,0:02:59.800
The do_GET function handles all get[br]requests our web server receives.

0:02:59.800,0:03:02.770
In order to figure out which resource[br]we are trying to access, we will use

0:03:02.770,0:03:06.960
a simple pattern matching plan that only[br]looks for the ending of our URL path.

0:03:06.960,0:03:10.062
Let's create another try except[br]block for our do_GET method.

0:03:10.062,0:03:13.980
The BaseHTTPRequestHandler[br]provides us a variable called path

0:03:13.980,0:03:17.110
that contains the URL sent by[br]the client to the server as a string.

0:03:17.110,0:03:21.700
I will make an if statement that looks[br]for the URL that ends with /hello.

0:03:21.700,0:03:24.590
I will tell my web server[br]to send a response code of

0:03:24.590,0:03:26.810
200 indicating a successful get request.

0:03:26.810,0:03:30.420
I will use the send_header function to[br]indicate that I'm replying with text in

0:03:30.420,0:03:34.430
the form of HTML to my client along[br]with this end_headers command which just

0:03:34.430,0:03:38.028
sends a blank line indicating the end[br]of our HTTP headers in the response.

0:03:38.028,0:03:41.430
Now that I've created the response[br]I can include some content to

0:03:41.430,0:03:42.740
send back to the client.

0:03:42.740,0:03:45.340
I'll create an empty string for[br]now and name it output.

0:03:45.340,0:03:47.810
In the next line I will add[br]a message with some HTML and

0:03:47.810,0:03:49.900
body tags to my output stream.

0:03:49.900,0:03:54.460
I can use the self.wfile.write function[br]to send a message back to the client.

0:03:54.460,0:03:56.970
So I'll go ahead and[br]put my output string there.

0:03:56.970,0:03:58.190
I'm going to add a print statement for

0:03:58.190,0:04:00.810
now, just so I can see my[br]output string in the terminal.

0:04:00.810,0:04:02.540
This might come in handy for debugging.

0:04:02.540,0:04:05.860
Then I can exit my if statement[br]with the return command.

0:04:05.860,0:04:08.200
I will also write an exception for[br]IOErrors, and

0:04:08.200,0:04:12.620
use the following line of code to notify[br]me of a 404 or file not found error.

0:04:12.620,0:04:13.990
Now, I think I'm ready to test and

0:04:13.990,0:04:15.690
see what I've written[br]thus far in the browser.
